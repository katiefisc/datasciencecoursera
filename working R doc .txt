
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.63 (6734) x86_64-apple-darwin10.8.0]

> data <- read.csv("hw1_data.csv")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
  cannot open file 'hw1_data.csv': No such file or directory
> pwd
Error: object 'pwd' not found
> data <-read.csv("hw1_data.csv")
> ozone <-data[ ,1]
> install.packages("swirl")
--- Please select a CRAN mirror for use in this session ---
trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/contrib/3.1/swirl_2.2.0.tgz'
Content type 'application/x-gzip' length 84310 bytes (82 Kb)
opened URL
==================================================
downloaded 82 Kb


The downloaded binary packages are in
	/var/folders/bp/ngl7tt0915lbfyh26b63p2v40000gp/T//RtmpDFXReD/downloaded_packages
l
> library(swirl)
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the
| same name as you did then. If you are new, call yourself something
| unique.

What shall I call you? Katie

| Thanks, Katie. Let's cover a couple of quick housekeeping items before
| we begin our first lesson. First off, you should know that when you see
| '...', that means you should press Enter when you are done reading and
| ready to continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked
| to select from a list, that means it's your turn to enter a response,
| then press Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 1

| You can exit swirl and return to the R prompt (>) at any time by
| pressing the Esc key. If you are already at the prompt, type bye() to
| exit and save your progress. When you exit properly, you'll see a short
| message letting know you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will
| ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing info() displays these options again.

| Let's get started!

...

| To begin, you must install a course. I can install a course for you
| from the internet, or I can send you to a web page
| (https://github.com/swirldev/swirl_courses) which will provide course
| options and directions for installing courses yourself. (If you are not
| connected to the internet, type 0 to exit.)
Course installed successfully!

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 1
  |                                                                |   0%

| In this lesson, we will explore some basic building blocks of the R
| programming language.

...
  |==                                                              |   3%
| If at any point you'd like more information on a particular topic
| related to R, you can type help.start() at the prompt, which will open
| a menu of resources (either within RStudio or your default web browser,
| depending on your setup). Alternatively, a simple web search often
| yields the answer you're looking for.

...
  |====                                                            |   6%
| In it's simplest form, R can be used as an interactive calculator. Type
| 5 + 7 and press Enter.

> 5+7
[1] 12

| That's a job well done!
  |======                                                          |   9%
| R simply prints the result of 12 by default. However, R is a
| programming language and often the reason we use a programming language
| as opposed to a calculator is to automate some process or avoid
| unnecessary repetition.

...
  |========                                                        |  12%
| In this case, we may want to use our result from above in a second
| calculation. Instead of retyping 5 + 7 every time we need it, we can
| just create a new variable that stores the result.

...
  |==========                                                      |  16%
| The way you assign a value to a variable in R is by using the
| assignment operator, which is just a 'less than' symbol followed by a
| 'minus' sign. It looks like this: <-

...
  |============                                                    |  19%
| Think of the assignment operator as an arrow. You are assigning the
| value on the right side of the arrow to the variable name on the left
| side of the arrow.

...
  |==============                                                  |  22%
| To assign the result of 5 + 7 to a new variable called x, you type x <-
| 5 + 7. This can be read as 'x gets 5 plus 7'. Give it a try now.

> x <- 5+7

| That's a job well done!
  |================                                                |  25%
| You'll notice that R did not print the result of 12 this time. When you
| use the assignment operator, R assumes that you don't want to see the
| result immediately, but rather that you intend to use the result for
| something else later on.

...
  |==================                                              |  28%
| To view the contents of the variable x, just type x and press Enter.
| Try it now.

> x
[1] 12

| Nice work!
  |====================                                            |  31%
| Now, store the result of x - 3 in a new variable called y.

> y <- x-3

| You are really on a roll!
  |======================                                          |  34%
| What is the value of y? Type y to find out.

> y
[1] 9

| Excellent job!
  |========================                                        |  38%
| Now, let's create a small collection of numbers called a vector. Any
| object that contains data is called a data structure and numeric
| vectors are the simplest type of data structure in R. In fact, even a
| single number is considered a vector of length one.

...
  |==========================                                      |  41%
| The easiest way to create a vector is with the c() function, which
| stands for 'concatenate' or 'combine'. To create a vector containing
| the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and
| store the result in a variable called z.

> z <- c(1.1, 9, 3.14)

| Excellent job!
  |============================                                    |  44%
| Anytime you have questions about a particular function, you can access
| R's built-in help files via the `?` command. For example, if you want
| more information on the c() function, type ?c without the parentheses
| that normally follow a function name. Give it a try.

> ?c
starting httpd help server ... done

| Excellent job!
  |==============================                                  |  47%
| Type z to view it's contents. Notice that there are no commas
| separating the values in the output.

> z
[1] 1.10 9.00 3.14

| You got it!
  |================================                                |  50%
| You can combine vectors to make a new vector. Create a new vector that
| contains z, 555, then z again in that order. Don't assign this vector
| to a new variable, so that we can just see the result immediately.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You nailed it! Good job!
  |==================================                              |  53%
| Numeric vectors can be used in arithmetic expressions. Type the
| following to see what happens: z * 2 + 100.

> z*2 + 100
[1] 102.20 118.00 106.28

| Excellent job!
  |====================================                            |  56%
| First, R multiplied each of the three elements in z by 2. Then it added
| 100 to each element to get the result you see above.

...
  |======================================                          |  59%
| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2
| means 'x squared'). To take the square root, use the sqrt() function
| and to take the absolute value, use the abs() function.

...
  |========================================                        |  62%
| Take the square root of z - 1 and assign it to a new variable called
| mySqrt.

> mySqrt <-sqrt(z-1)

| You're the best!
  |==========================================                      |  66%
| Before we view the contents of the mySqrt variable, what do you think
| it contains?

1: a single number (i.e a vector of length 1)
2: a vector of length 3
3: a vector of length 0 (i.e. an empty vector)

Selection: 3

| Give it another try.

| Think about how R handled the other 'vectorized' operations:
| element-by-element.

1: a vector of length 3
2: a single number (i.e a vector of length 1)
3: a vector of length 0 (i.e. an empty vector)

Selection: 1

| Excellent job!
  |============================================                    |  69%
| Print the contents of mySqrt.

> mySqrt
[1] 0.3162278 2.8284271 1.4628739

| You got it right!
  |==============================================                  |  72%
| As you may have guessed, R first subtracted 1 from each element of z,
| then took the square root of each element. This leaves you with a
| vector of the same length as the original vector z.

...
  |================================================                |  75%
| Now, create a new variable called myDiv that gets the value of z
| divided by mySqrt.

> myDiv <- z/mySqrt

| You are really on a roll!
  |==================================================              |  78%
| Which statement do you think is true?

1: The first element of myDiv is equal to the first element of z divided by the first element of mySqrt, and so on...
2: myDiv is a single number (i.e a vector of length 1)
3: myDiv is undefined

Selection: 1

| You nailed it! Good job!
  |====================================================            |  81%
| Go ahead and print the contents of myDiv.

> myDiv
[1] 3.478505 3.181981 2.146460

| You are doing so well!
  |======================================================          |  84%
| When given two vectors of the same length, R simply performs the
| specified arithmetic operation (`+`, `-`, `*`, etc.)
| element-by-element. If the vectors are of different lengths, R
| 'recycles' the shorter vector until it is the same length as the longer
| vector.

...
  |========================================================        |  88%
| When we did z * 2 + 100 in our earlier example, z was a vector of
| length 3, but technically 2 and 100 are each vectors of length 1.

...
  |==========================================================      |  91%
| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and
| the 100 to make a vector of 100s. In other words, when you ask R to
| compute z * 2 + 100, what it really computes is this: z * c(2, 2, 2) +
| c(100, 100, 100).

...
  |============================================================    |  94%
| To see another example of how this vector 'recycling' works, try adding
| c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a
| new variable.

> c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14

| Great job!
  |==============================================================  |  97%
| If the length of the shorter vector does not divide evenly into the
| length of the longer vector, R will still apply the 'recycling' method,
| but will throw a warning to let you know something fishy might be going
| on.

...
  |================================================================| 100%
| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| Nice work!

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002
Submission login (email): katiefiscalini@gmail.com
Submission password: eVmMKaefPV

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002,
| Basic_Building_Blocks.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 2
  |                                                                |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...
  |===                                                             |   5%
| The simplest way to create a sequence of numbers in R is by using the
| `:` operator. Type 1:20 to see how it works.

> nxt()

| Resuming lesson...


| The simplest way to create a sequence of numbers in R is by using the
| `:` operator. Type 1:20 to see how it works.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will
| ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing info() displays these options again.

> bye()

| Leaving swirl now. Type swirl() to resume.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the
| same name as you did then. If you are new, call yourself something
| unique.

What shall I call you? Katie

| Would you like to continue with one of these lessons?

1: R Programming Sequences of Numbers
2: No. Let me start something new.

Selection: 1



| The simplest way to create a sequence of numbers in R is by using the
| `:` operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You got it right!
  |======                                                          |   9%
| That gave us every integer between (and including) 1 and 20. We could
| also use it to create a sequence of real numbers. For example, try
| pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| You are really on a roll!
  |=========                                                       |  14%
| The result is a vector of real numbers starting with pi (3.142...) and
| increasing in increments of 1. The upper limit of 10 is never reached,
| since the next number in our sequence would be greater than 10.

...
  |============                                                    |  18%
| What happens if we do this: 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| You're the best!
  |===============                                                 |  23%
| It counted backwards in increments of 1! It's unlikely we'd want this
| behavior, but nonetheless it's good to know how it could happen.

...
  |=================                                               |  27%
| Remember that if you have questions about a particular R function, you
| can access its documentation with a question mark followed by the
| function name: ?function_name_here. However, in the case of an operator
| like the colon used above, you must enclose the symbol in backticks
| like this: ?`:`. (NOTE: The backtick (`) key is generally located in
| the top left corner of a keyboard, above the Tab key.)

...
  |====================                                            |  32%
| Pull up the documentation for `:` now.

> ?`:`

| That's correct!
  |=======================                                         |  36%
| Often, we'll desire more control over a sequence we're creating than
| what the `:` operator gives us. The seq() function serves this purpose.

...
  |==========================                                      |  41%
| The most basic use of seq() does exactly the same thing as the `:`
| operator. Try seq(1, 20) to see this.

> seq(1, 20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Keep up the great work!
  |=============================                                   |  45%
| This gives us the same output as 1:20. However, let's say that instead
| we want a vector of numbers ranging from 0 to 10, incremented by 0.5.
| seq(0, 10, by=0.5) does just that. Try it out.

> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5
[15]  7.0  7.5  8.0  8.5  9.0  9.5 10.0

| You got it!
  |================================                                |  50%
| Or maybe we don't care what the increment is and we just want a
| sequence of 30 numbers between 5 and 10. seq(5, 10, length=30) does the
| trick. Give it shot now and store the result in a new variable called
| my_seq.

> my_seq <-seq(5, 10, length=30)

| You got it right!
  |===================================                             |  55%
| To confirm that my_seq has length 30, we can use the length() function.
| Try it now.

> lenth(my_seq)
Error: could not find function "lenth"
> length(my_seq)
[1] 30

| You are doing so well!
  |======================================                          |  59%
| Let's pretend we don't know the length of my_seq, but we want to
| generate a sequence of integers from 1 to N, where N represents the
| length of the my_seq vector. In other words, we want a new vector (1,
| 2, 3, ...) that is the same length as my_seq.

...
  |=========================================                       |  64%
| There are several ways we could do this. One possibility is to combine
| the `:` operator and the length() function like this: 1:length(my_seq).
| Give that a try.

> 1:length(my_deq)
Error: object 'my_deq' not found
> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
[24] 24 25 26 27 28 29 30

| Nice work!
  |============================================                    |  68%
| Another option is to use seq(along = my_seq). Give that a try.

> seq(along = my)
Error in seq(along = my) : object 'my' not found
> seq(along = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
[24] 24 25 26 27 28 29 30

| You are amazing!
  |===============================================                 |  73%
| However, as is the case with many common tasks, R has a separate
| built-in function for this purpose called seq_along(). Type
| seq_along(my_seq) to see it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
[24] 24 25 26 27 28 29 30

| That's a job well done!
  |=================================================               |  77%
| There are often several approaches to solving the same problem,
| particularly in R. Simple approaches that involve less typing are
| generally best. It's also important for your code to be readable, so
| that you and others can figure out what's going on without too much
| hassle.

...
  |====================================================            |  82%
| If R has a built-in function for a particular task, it's likely that
| function is highly optimized for that purpose and is your best option.
| As you become a more advanced R programmer, you'll design your own
| functions to perform tasks when there are no better options. We'll
| explore writing your own functions in future lessons.

...
  |=======================================================         |  86%
| One more function related to creating sequences of numbers is rep(),
| which stands for 'replicate'. Let's look at a few uses.

...
  |==========================================================      |  91%
| If we're interested in creating a vector that contains 40 zeros, we can
| use rep(0, times = 40). Try it out.

> rep(0,times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[36] 0 0 0 0 0

| That's correct!
  |=============================================================   |  95%
| If instead we want our vector to contain 10 repetitions of the vector
| (0, 1, 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| Great job!
  |================================================================| 100%
| Finally, let's say that rather than repeating the vector (0, 1, 2) over
| and over again, we want our vector to contain 10 zeros, then 10 ones,
| then 10 twos. We can do this with the `each` argument. Try rep(c(0, 1,
| 2), each = 10).

> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| That's a job well done!

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002,
| Sequences_of_Numbers.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 3
  |                                                                |   0%

| The simplest and most common data structure in R is the vector.

...
  |==                                                              |   3%
| Vectors come in two different flavors: atomic vectors and lists. An
| atomic vector contains exactly one data type, whereas a list may
| contain multiple data types. We'll explore atomic vectors further
| before we get to lists.

...
  |===                                                             |   5%
| In previous lessons, we dealt entirely with numeric vectors, which are
| one type of atomic vector. Other types of atomic vectors include
| logical, character, integer, and complex. In this lesson, we'll take a
| closer look at logical and character vectors.

...
  |=====                                                           |   8%
| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not
| available'). These values are generated as the result of logical
| 'conditions'. Let's experiment with some simple conditions.

...
  |=======                                                         |  11%
| First, create a numeric vector num_vect that contains the values 0.5,
| 55, -10, and 6.

> c(.5, 55, -10, 6)
[1]   0.5  55.0 -10.0   6.0

| Not quite right, but keep trying. Or, type info() for more options.

| Recall that the c() function is used for creating a vector. If you
| forget how to use it, use ?c to access the help file. Don't forget to
| assign the result to a new variable called num_vect.

> num_vect <-c(.5, 55, -10, 6)

| Great job!
  |=========                                                       |  14%
| Now, create a variable called tf that gets the result of num_vect < 1,
| which is read as 'num_vect is less than 1'.

> tf <- num_vect < 1

| You got it right!
  |==========                                                      |  16%
| What do you think tf will look like?

1: a vector of 4 logical values
2: a single logical value

Selection: 2

| Nice try, but that's not exactly what I was hoping for. Try again.

| Remember our lesson on vector arithmetic? The theme was that R performs
| many operations on an element-by-element basis. We called these
| 'vectorized' operations.

1: a single logical value
2: a vector of 4 logical values

Selection: 2

| You are doing so well!
  |============                                                    |  19%
| Print the contents of tf now.

> tf
[1]  TRUE FALSE  TRUE FALSE

| That's a job well done!
  |==============                                                  |  22%
| The statement num_vect < 1 is a condition and tf tells us whether each
| corresponding element of our numeric vector num_vect satisfies this
| condition.

...
  |================                                                |  24%
| The first element of num_vect is 0.5, which is less than 1 and
| therefore the statement 0.5 < 1 is TRUE. The second element of num_vect
| is 55, which is greater than 1, so the statement 55 < 1 is FALSE. The
| same logic applies for the third and fourth elements.

...
  |=================                                               |  27%
| Let's try another. Type num_vect >= 6 without assigning the result to a
| new variable.

> num_vect >=6
[1] FALSE  TRUE FALSE  TRUE

| Keep up the great work!
  |===================                                             |  30%
| This time, we are asking whether each individual element of num_vect is
| greater than OR equal to 6. Since only 55 and 6 are greater than or
| equal to 6, the second and forth elements of the result are TRUE and
| the first and third elements are FALSE.

...
  |=====================                                           |  32%
| The `<` and `>=` symbols in these examples are called 'logical
| operators'. Other logical operators include `>`, `<=`, `==` for exact
| equality, and `!=` for inequality.

...
  |======================                                          |  35%
| If we have two logical expressions, A and B, we can ask whether at
| least one is TRUE with A | B (logical 'or' a.k.a. 'union') or whether
| they are both TRUE with A & B (logical 'and' a.k.a. 'intersection').
| Lastly, !A is the negation of A and is TRUE when A is FALSE and vice
| versa.

...
  |========================                                        |  38%
| It's a good idea to spend some time playing around with various
| combinations of these logical operators until you get comfortable with
| their use. We'll do a few examples here to get you started.

...
  |==========================                                      |  41%
| Try your best to predict the result of each of the following
| statements. You can use pencil and paper to work them out if it's
| helpful. If you get stuck, just guess and you've got a 50% chance of
| getting the right answer!

...
  |============================                                    |  43%
| (3 > 5) & (4 == 4)

1: TRUE
2: FALSE

Selection: 1

| Not quite right, but keep trying.

| Break this problem down into 2 pieces. The `&` in the middle states
| that BOTH pieces are TRUE. Your job is to figure out if that is an
| accurate statement. If so, the entire condition is TRUE. If not, it's
| FALSE.

1: FALSE
2: TRUE

Selection: 1

| Keep up the great work!
  |=============================                                   |  46%
| (TRUE == TRUE) | (TRUE == FALSE)

1: FALSE
2: TRUE

Selection: 1

| Give it another try.

| Break this problem down into 2 pieces. The `|` in the middle states
| that AT LEAST ONE of the pieces is TRUE. Your job is to figure out if
| that is an accurate statement. If so, the entire condition is TRUE. If
| not, it's FALSE.

1: FALSE
2: TRUE

Selection: 2

| You got it!
  |===============================                                 |  49%
| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Selection: 2

| You're the best!
  |=================================                               |  51%
| Don't worry if you found these to be tricky. They're supposed to be.
| Working with logical statements in R takes practice, but your efforts
| will be rewarded in future lessons (e.g. subsetting and control
| structures).

...
  |===================================                             |  54%
| Character vectors are also very common in R. Double quotes are used to
| distinguish character objects, as in the following example.

...
  |====================================                            |  57%
| Create a character vector that contains the following words: "My",
| "name", "is". Remember to enclose each word in it's own set of double
| quotes, so that R knows they are character strings. Store the vector in
| a variable called my_char.

> my_char c("My", "name", "is")
Error: unexpected symbol in "my_char c"
> my_char <-c("My", "name", "is")

| You are quite good my friend!
  |======================================                          |  59%
| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| Keep up the great work!
  |========================================                        |  62%
| Right now, my_char is a character vector of length 3. Let's say we want
| to join the elements of my_char together into one continuous character
| string (i.e. a character vector of length 1). We can do this using the
| paste() function.

...
  |==========================================                      |  65%
| Type paste(my_char, collapse = " ") now. Make sure there's a space
| between the double quotes in the `collapse` argument. You'll see why in
| a second.

> past(mu_char, collapse = " ")
Error: could not find function "past"
> paste(my_char, collapse = " ")
[1] "My name is"

| You nailed it! Good job!
  |===========================================                     |  68%
| The `collapse` argument to the paste() function tells R that when we
| join together the elements of the my_char character vector, we'd like
| to separate them with single spaces.

...
  |=============================================                   |  70%
| It seems that we're missing something.... Ah, yes! Your name!

...
  |===============================================                 |  73%
| To add (or 'concatenate') your name to the end of my_char, use the c()
| function like this: c(my_char, "your_name_here"). Place your name in
| double quotes where I've put "your_name_here". Try it now, storing the
| result in a new variable called my_name.

> my_name <-c(my_char, "Katie")

| You are doing so well!
  |================================================                |  76%
| Take a look at the contents of my_name.

> my_name
[1] "My"    "name"  "is"    "Katie"

| You are doing so well!
  |==================================================              |  78%
| Now, use the paste() function once more to join the words in my_name
| together into a single character string. Don't forget to say collapse =
| " "!

> paste(my_name, collapse = " ")
[1] "My name is Katie"

| You are amazing!
  |====================================================            |  81%
| In this example, we used the paste() function to collapse the elements
| of a single character vector. paste() can also be used to join the
| elements of multiple character vectors.

...
  |======================================================          |  84%
| In the simplest case, we can join two character vectors that are each
| of length 1 (i.e. join two words). Try paste("Hello", "world!", sep = "
| "), where the `sep` argument tells R that we want to separate the
| joined elements with a single space.

> paste("Hello", "World!", sep = " ")
[1] "Hello World!"

| Keep trying! Or, type info() for more options.

| Enter paste("Hello", "world!", sep = " ") to join the two words "Hello"
| and "world", separated by a single space. There should be a single
| space between the double quotes in the `sep` argument to the paste()
| function.

> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| Keep up the great work!
  |=======================================================         |  86%
| For a slightly more complicated example, we can join two vectors, each
| of length 3. Use paste() to join the numeric vector 1:3 (recall this is
| the same as c(1, 2, 3)) with the character vector c("X", "Y", "Z").
| This time, use sep = "" to leave no space between the joined elements.

> paste(1:3, sep = "")
[1] "1" "2" "3"

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| Use paste(1:3, c("X", "Y", "Z"), sep = "") to see what happens when we
| join two vectors of equal length using paste().

> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| You are amazing!
  |=========================================================       |  89%
| What do you think will happen if our vectors are of different length?
| (Hint: we talked about this in a previous lesson.)

...
  |===========================================================     |  92%
| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is
| a predefined variable in R containing a character vector of all 26
| letters in the English alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3"
[12] "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2"
[23] "W-3" "X-4" "Y-1" "Z-2"

| You are amazing!
  |=============================================================   |  95%
| Since the character vector LETTERS is longer than the numeric vector
| 1:4, R simply recycles, or repeats, 1:4 until it matches the length of
| LETTERS.

...
  |==============================================================  |  97%
| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a
| character vector by the paste() function.

...
  |================================================================| 100%
| We'll discuss coercion in another lesson, but all it really means that
| the numbers 1, 2, 3, and 4 in the output above are no longer numbers to
| R, but rather characters "1", "2", "3", and "4".

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002, Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 4
  |                                                                |   0%

| Missing values play an important role in statistics and data analysis.
| Often, missing values must not be ignored, but rather they should be
| carefully studied to see if there's an underlying pattern or cause for
| their missingness.

...
  |===                                                             |   5%
| In R, NA is used to represent any value that is 'not available' or
| 'missing' (in the statistical sense). In this lesson, we'll explore
| missing values further.

...
  |=======                                                         |  11%
| Any operation involving NA generally yields NA as the result. To
| illustrate, let's create a vector c(44, NA, 5, NA) and assign it to a
| variable x.

> 
> x <-c(44, NA, 5, NA)

| Keep up the great work!
  |==========                                                      |  16%
| Now, let's multiply x by 3.

> x*3
[1] 132  NA  15  NA

| Keep up the great work!
  |=============                                                   |  21%
| Notice that the elements of the resulting vector that correspond with
| the NA values in x are also NA.

...
  |=================                                               |  26%
| To make things a little more interesting, lets create a vector
| containing 1000 draws from a standard normal distribution with y <-
| rnorm(1000).

> y <-rnorm(1000)

| You are really on a roll!
  |====================                                            |  32%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA,
| 1000).

> z <-rep(NA, 1000)

| That's correct!
  |========================                                        |  37%
| Finally, let's select 100 elements at random from these 2000 values
| (combining y and z) such that we don't know how many NAs we'll wind up
| with or what positions they'll occupy in our final vector -- myData <-
| sample(c(y, z), 100).

> myData <-sample(c(y,z), 100)

| You're the best!
  |===========================                                     |  42%
| Let's first ask the question of where our NAs are located in our data.
| The is.na() function tells us whether each element of a vector is NA.
| Call is.na() on myData and assign the result to myNA.

> is.na(mydata)
Error: object 'mydata' not found
> is.na(myData)
  [1]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE
 [12] FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [23] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [34]  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
 [45] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
 [56]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
 [67] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE
 [78]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE
 [89] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
[100] FALSE

| Keep trying! Or, type info() for more options.

| Assign the result of is.na(myData) to the variable myNA.

> myNA <-is.na(myData)

| You are really on a roll!
  |==============================                                  |  47%
| Now, print myNA to see what you came up with.

> myNA
  [1]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE
 [12] FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [23] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [34]  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
 [45] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
 [56]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
 [67] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE
 [78]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE
 [89] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
[100] FALSE

| That's a job well done!
  |==================================                              |  53%
| Everywhere you see a TRUE, you know the corresponding element of myData
| is NA. Likewise, everywhere you see a FALSE, you know the corresponding
| element of myData is one of our random draws from the standard normal
| distribution.

...
  |=====================================                           |  58%
| In our previous discussion of logical operators, we introduced the `==`
| operator as a method of testing for equality between two objects. So,
| you might think the expression myData == NA yields the same results as
| is.na(). Give it a try.

> myData = NA

| Nice try, but that's not exactly what I was hoping for. Try again. Or,
| type info() for more options.

| Try myData == NA to see what happens.

> myData == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [24] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [47] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [70] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [93] NA NA NA NA NA NA NA NA

| Excellent job!
  |========================================                        |  63%
| The reason you got a vector of all NAs is that NA is not really a
| value, but just a placeholder for a quantity that is not available.
| Therefore the logical expression is incomplete and R has no choice but
| to return a vector of the same length as myData that contains all NAs.

...
  |============================================                    |  68%
| Don't worry if that's a little confusing. The key takeaway is to be
| cautious when using logical expressions anytime NAs might creep in,
| since a single NA value can derail the entire thing.

...
  |===============================================                 |  74%
| So, back to the task at hand. Now that we have a vector, myNA, that has
| a TRUE for every NA and FALSE for every numeric value, we can compute
| the total number of NAs in our data.

...
  |===================================================             |  79%
| The trick is to recognize that underneath the surface, R represents
| TRUE as the number 1 and FALSE as the number 0. Therefore, if we take
| the sum of a bunch of TRUEs and FALSEs, we get the total number of
| TRUEs.

...
  |======================================================          |  84%
| Let's give that a try here. Call the sum() function on myNA to count
| the total number of TRUEs in myNA, and thus the total number of NAs in
| myData. Don't assign the result to a new variable.

> sum(myNA)
[1] 48

| Nice work!
  |=========================================================       |  89%
| Pretty cool, huh? Finally, let's take a look at the data to convince
| ourselves that everything 'adds up'. Print myData to the console.

> myData
  [1]           NA  1.451009313 -1.352185680  0.474249819           NA
  [6]  2.445288279           NA -1.374421315           NA -1.475911581
 [11]           NA  0.005487945  1.916986107           NA           NA
 [16] -0.234238546           NA           NA  0.072936219 -0.139570008
 [21] -0.940997797  1.106699333 -0.668242950 -1.179789498 -1.192022250
 [26]           NA  0.598731362           NA -0.611822008  0.774713171
 [31]           NA           NA           NA           NA -0.725512551
 [36]           NA           NA  0.714186814           NA           NA
 [41]           NA  1.151365836  0.782502149  0.886573300 -0.136717190
 [46]           NA           NA -0.364872372  0.682580246  0.615767733
 [51]  0.222998043 -0.341290526           NA           NA  0.236615373
 [56]           NA           NA -0.368762740 -0.496287082           NA
 [61] -0.488619759           NA           NA           NA           NA
 [66]           NA -1.160400453           NA -0.537409640  0.634743134
 [71]           NA -0.351229637 -0.607282994           NA  1.412352058
 [76]  0.413401912  0.046247265           NA -0.105072503           NA
 [81]           NA -0.510073293  0.278490127           NA  0.521479780
 [86]           NA           NA           NA -1.382141375           NA
 [91] -0.813797960 -0.571985330  0.498826622           NA           NA
 [96]           NA -1.002827890           NA           NA  1.739117201

| Excellent job!
  |=============================================================   |  95%
| Now that we've got NAs down pat, let's look at a second type of missing
| value -- NaN, which stands for 'not a number'. To generate NaN, try
| dividing (using a forward slash) 0 by 0 now.

> 0/0
[1] NaN

| Excellent job!
  |================================================================| 100%
| Let's do one more, just for fun. In R, Inf stands for infinity. What
| happens if you subtract Inf from Inf?

> Inf-INf
Error: object 'INf' not found
> Inf-Inf
[1] NaN

| You got it right!

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002,
| Missing_Values.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 5
  |                                                                |   0%

| In this lesson, we'll see how to extract elements from a vector based
| on some conditions that we specify.

...
  |==                                                              |   3%
| For example, we may only be interested in the first 20 elements of a
| vector, or only the elements that are not NA, or only those that are
| positive or correspond to a specific variable of interest. By the end
| of this lesson, you'll know how to handle each of these scenarios.

...
  |===                                                             |   5%
| I've created for you a vector called x that contains a random ordering
| of 20 numbers (from a standard normal distribution) and 20 NAs. Type x
| now to see what it looks like.

> x
 [1]           NA  0.505833770 -1.785572995           NA           NA
 [6]           NA  0.606172682           NA  0.828424622 -0.842389828
[11]           NA           NA  0.838041850  0.005942851           NA
[16]  0.274045348           NA           NA  0.233199495           NA
[21]           NA -0.959914895           NA -0.973491501 -0.060363093
[26] -0.762160189  1.532136111           NA           NA  0.810520031
[31]  1.537333231 -0.065154462           NA           NA -1.341949491
[36]           NA           NA  0.737734767           NA  1.175496950

| You are amazing!
  |=====                                                           |   8%
| The way you tell R that you want to select some particular elements
| (i.e. a 'subset') from a vector is by placing an 'index vector' in
| square brackets immediately following the name of the vector.

...
  |=======                                                         |  11%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1]         NA  0.5058338 -1.7855730         NA         NA         NA
 [7]  0.6061727         NA  0.8284246 -0.8423898

| Nice work!
  |========                                                        |  13%
| Index vectors come in four different flavors -- logical vectors,
| vectors of positive integers, vectors of negative integers, and vectors
| of character strings -- each of which we'll cover in this lesson.

...
  |==========                                                      |  16%
| Let's start by indexing with logical vectors. One common scenario when
| working with real-world data is that we want to extract all elements of
| a vector that are not NA (i.e. missing data). Recall that is.na(x)
| yields a vector of logical values the same length as x, with TRUEs
| corresponding to NA values in x and FALSEs corresponding to non-NA
| values in x.

...
  |============                                                    |  18%
| What do you think x[is.na(x)] will give you?

1: A vector of length 0
2: A vector of all NAs
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 4

| You almost had it, but not quite. Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we
| subset x based on that, what do you expect to happen?

1: A vector of length 0
2: A vector of TRUEs and FALSEs
3: A vector with no NAs
4: A vector of all NAs

Selection: 4

| Keep up the great work!
  |=============                                                   |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| That's a job well done!
  |===============                                                 |  24%
| Recall that `!` gives us the negation of a logical expression, so
| !is.na(x) can be read as 'is not NA'. Therefore, if we want to create a
| vector called y that contains all of the non-NA values from x, we can
| use y <- x[!is.na(x)]. Give it a try.

> y <-[!is.na(x)]
Error: unexpected '[' in "y <-["
> y <- x[!is.na(x)]

| You got it right!
  |=================                                               |  26%
| Print y to the console.

> y
 [1]  0.505833770 -1.785572995  0.606172682  0.828424622 -0.842389828
 [6]  0.838041850  0.005942851  0.274045348  0.233199495 -0.959914895
[11] -0.973491501 -0.060363093 -0.762160189  1.532136111  0.810520031
[16]  1.537333231 -0.065154462 -1.341949491  0.737734767  1.175496950

| You are really on a roll!
  |===================                                             |  29%
| Now that we've isolated the non-missing values of x and put them in y,
| we can subset y as we please.

...
  |====================                                            |  32%
| Recall that the expression y > 0 will give us a vector of logical
| values the same length as y, with TRUEs corresponding to values of y
| that are greater than zero and FALSEs corresponding to values of y that
| are less than or equal to zero. What do you think y[y > 0] will give
| you?

1: A vector of all NAs
2: A vector of length 0
3: A vector of TRUEs and FALSEs
4: A vector of all the postive elements of y
5: A vector of all the negative elements of y

Selection: 4

| You got it right!
  |======================                                          |  34%
| Type y[y > 0] to see that we get all of the positive elements of y,
| which are also the positive elements of our original vector x.

> 
> y[y > 0]
 [1] 0.505833770 0.606172682 0.828424622 0.838041850 0.005942851
 [6] 0.274045348 0.233199495 1.532136111 0.810520031 1.537333231
[11] 0.737734767 1.175496950

| You nailed it! Good job!
  |========================                                        |  37%
| You might wonder why we didn't just start with x[x > 0] to isolate the
| positive elements of x. Try that now to see why.

> x[x > 0]
 [1]          NA 0.505833770          NA          NA          NA
 [6] 0.606172682          NA 0.828424622          NA          NA
[11] 0.838041850 0.005942851          NA 0.274045348          NA
[16]          NA 0.233199495          NA          NA          NA
[21] 1.532136111          NA          NA 0.810520031 1.537333231
[26]          NA          NA          NA          NA 0.737734767
[31]          NA 1.175496950

| You are doing so well!
  |=========================                                       |  39%
| Since NA is not a value, but rather a placeholder for an unknown
| quantity, the expression NA > 0 evaluates to NA. Hence we get a bunch
| of NAs mixed in with our positive numbers when we do this.

...
  |===========================                                     |  42%
| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x > 0]
 [1] 0.505833770 0.606172682 0.828424622 0.838041850 0.005942851
 [6] 0.274045348 0.233199495 1.532136111 0.810520031 1.537333231
[11] 0.737734767 1.175496950

| Nice work!
  |=============================                                   |  45%
| In this case, we request only values of x that are both non-missing AND
| greater than zero.

...
  |==============================                                  |  47%
| I've already shown you how to subset just the first ten values of x
| using x[1:10]. In this case, we're providing a vector of positive
| integers inside of the square brackets, which tells R to return only
| the elements of x numbered 1 through 10.

...
  |================================                                |  50%
| Many programming languages use what's called 'zero-based indexing',
| which means that the first element of a vector is considered element 0.
| R uses 'one-based indexing', which (you guessed it!) means the first
| element of a vector is considered element 1.

...
  |==================================                              |  53%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x?
| Hint -- Use the c() function to specify the element numbers as a
| numeric vector.

> x(3:7)
Error: could not find function "x"
> x <-c

| Give it another try. Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the
| square brackets.

> [c(3, 5, 7)]
Error: unexpected '[' in "["
> x <- c(3, 5, 7)

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the
| square brackets.

> x <- [c(3, 5, 7)]
Error: unexpected '[' in "x <- ["
> x
 [1]           NA  0.505833770 -1.785572995           NA           NA
 [6]           NA  0.606172682           NA  0.828424622 -0.842389828
[11]           NA           NA  0.838041850  0.005942851           NA
[16]  0.274045348           NA           NA  0.233199495           NA
[21]           NA -0.959914895           NA -0.973491501 -0.060363093
[26] -0.762160189  1.532136111           NA           NA  0.810520031
[31]  1.537333231 -0.065154462           NA           NA -1.341949491
[36]           NA           NA  0.737734767           NA  1.175496950

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the
| square brackets.

> x[c(3, 5, 7)]
[1] -1.7855730         NA  0.6061727

| That's correct!
  |===================================                             |  55%
| It's important that when using integer vectors to subset our vector x,
| we stick with the set of indexes {1, 2, ..., 40} since x only has 40
| elements. What happens if we ask for the zeroth element of x (i.e.
| x[0])? Give it a try.

> x[0]
numeric(0)

| Excellent job!
  |=====================================                           |  58%
| As you might expect, we get nothing useful. Unfortunately, R doesn't
| prevent us from doing this. What if we ask for the 3000th element of x?
| Try it out.

> x[3000]
[1] NA

| You are quite good my friend!
  |=======================================                         |  61%
| Again, nothing useful, but R doesn't prevent us from asking for it.
| This should be a cautionary tale. You should always make sure that what
| you are asking for is within the bounds of the vector you're working
| with.

...
  |========================================                        |  63%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th?
| It would be pretty tedious to construct a vector containing all numbers
| 1 through 40 EXCEPT 2 and 10.

...
  |==========================================                      |  66%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives
| us ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us all
| elements of x EXCEPT for the 2nd and 10 elements.  Try x[c(-2, -10)]
| now to see this.

> x[c(-2, -10)]
 [1]           NA -1.785572995           NA           NA           NA
 [6]  0.606172682           NA  0.828424622           NA           NA
[11]  0.838041850  0.005942851           NA  0.274045348           NA
[16]           NA  0.233199495           NA           NA -0.959914895
[21]           NA -0.973491501 -0.060363093 -0.762160189  1.532136111
[26]           NA           NA  0.810520031  1.537333231 -0.065154462
[31]           NA           NA -1.341949491           NA           NA
[36]  0.737734767           NA  1.175496950

| Great job!
  |============================================                    |  68%
| A shorthand way of specifying multiple negative numbers is to put the
| negative sign out in front of the vector of positive numbers. Type
| x[-c(2, 10)] to get the exact same result.

> x[-c(2,10)]
 [1]           NA -1.785572995           NA           NA           NA
 [6]  0.606172682           NA  0.828424622           NA           NA
[11]  0.838041850  0.005942851           NA  0.274045348           NA
[16]           NA  0.233199495           NA           NA -0.959914895
[21]           NA -0.973491501 -0.060363093 -0.762160189  1.532136111
[26]           NA           NA  0.810520031  1.537333231 -0.065154462
[31]           NA           NA -1.341949491           NA           NA
[36]  0.737734767           NA  1.175496950

| Great job!
  |=============================================                   |  71%
| So far, we've covered three types of index vectors -- logical, postive
| integer, and negative integer. The only remaining type requires us to
| introduce the concept of 'named' elements.

...
  |===============================================                 |  74%
| Create a numeric vector with three named elements using vect <- c(foo =
| 11, bar = 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| You're the best!
  |=================================================               |  76%
| When we print vect to the console, you'll see that each element has a
| name. Try it out.

> 
> vect
 foo  bar norf 
  11    2   NA 

| You are amazing!
  |===================================================             |  79%
| We can also get the names of vect by passing vect as an argument to the
| names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| That's a job well done!
  |====================================================            |  82%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA).
| Do that now.

> vect2 <-c(11, 2, NA)

| That's correct!
  |======================================================          |  84%
| Then, we can add the `names` attribute to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <-c("foo", "bar", "norf")

| That's correct!
  |========================================================        |  87%
| Now, let's check that vect and vect2 are the same by passing them as
| arguments to the identical() function.

> identical(vect, vect2)
[1] TRUE

| You are amazing!
  |=========================================================       |  89%
| Indeed, vect and vect2 are identical named vectors.

...
  |===========================================================     |  92%
| Now, back to the matter of subsetting a vector by named elements. Which
| of the following commands do you think would give us the second element
| of vect?

1: vect["2"]
2: vect[bar]
3: vect["bar"]

Selection: 1

| Not quite right, but keep trying.

| If we want the element named "bar" (i.e. the second element of vect),
| which command would get us that?

1: vect["bar"]
2: vect[bar]
3: vect["2"]

Selection: 1

| You're the best!
  |=============================================================   |  95%
| Now, try it out.

> vect["bar"]
bar 
  2 

| That's correct!
  |==============================================================  |  97%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")].
| Try it out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| You're the best!
  |================================================================| 100%
| Now you know all four methods of subsetting data from vectors.
| Different approaches are best in different scenarios and when in doubt,
| try it out!

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002,
| Subsetting_Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

1: Basic Building Blocks
2: Sequences of Numbers
3: Vectors
4: Missing Values
5: Subsetting Vectors
6: Matrices and Data Frames

Selection: 6
  |                                                                |   0%

| In this lesson, we'll cover matrices and data frames. Both represent
| 'rectangular' data types, meaning that they are used to store tabular
| data, with rows and columns.

...
  |==                                                              |   3%
| The main difference, as you'll see, is that matrices can only contain a
| single class of data, while data frames can consist of many different
| classes of data.

...
  |====                                                            |   6%
| Let's create a vector containing the numbers 1 through 20 using the `:`
| operator. Store the result in a variable called myVector.

> myVector <- [c(1:20)]
Error: unexpected '[' in "myVector <- ["
> myVector <- c(1:20)

| Give it another try. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> myVector <- c(1:20)

| Keep trying! Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> myVector <- [1:20]
Error: unexpected '[' in "myVector <- ["
> myVector <-c(1:20)

| Not quite! Try again. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> myVector <- (1:20)

| You almost had it, but not quite. Try again. Or, type info() for more
| options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will
| ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing info() displays these options again.

> myVector <- c(1:20)

| That's not exactly what I'm looking for. Try again. Or, type info() for
| more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> c(1:20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Give it another try. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> myVector <-c(1:20)

| Nice try, but that's not exactly what I was hoping for. Try again. Or,
| type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you
| wanted to create a vector containing the numbers 1, 2, and 3 (in that
| order), you could use either c(1, 2, 3) or 1:3. In this case, we want
| the numbers 1 through 20 stored in a variable called myVector.

> myVector <- 1:20

| You are doing so well!
  |=====                                                           |   9%
| View the contents of the vector you just created.

> myVector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You got it right!
  |=======                                                         |  11%
| The dim() function tells us the 'dimensions' of an object. What happens
| if we do dim(myVector)? Give it try.

> dim(myVector)
NULL

| That's correct!
  |=========                                                       |  14%
| Clearly, that's not very helpful! Since myVector is a vector, it
| doesn't have a `dim` attribute (so it's just NULL), but we can find its
| length using the length() function. Try that now.

> length(myVector)
[1] 20

| You are doing so well!
  |===========                                                     |  17%
| Ah! That's what we wanted. But, what happens if we give myVector a
| `dim` attribute? Let's give it a try. Type dim(myVector) <- c(4, 5).

> dim(myVector) <- c(4,5)

| You nailed it! Good job!
  |=============                                                   |  20%
| It's okay if that last command seemed a little strange to you. It
| should! The dim() function allows you to get OR set the `dim` attribute
| for an R object. In this case, we assigned the value c(4, 5) to the
| `dim` attribute of myVector.

...
  |===============                                                 |  23%
| Use dim(myVector) to confirm that we've set the `dim` attribute
| correctly.

> dim(myVector)
[1] 4 5

| You're the best!
  |================                                                |  26%
| Another way to see this is by calling the attributes() function on
| myVector. Try it now.

> attributes(myVector)
$dim
[1] 4 5


| You are doing so well!
  |==================                                              |  29%
| Just like in math class, when dealing with a 2-dimensional object
| (think rectangular table), the first number is the number of rows and
| the second is the number of columns. Therefore, we just gave myVector 4
| rows and 5 columns.

...
  |====================                                            |  31%
| But, wait! That doesn't sound like a vector any more. Well, it's not.
| Now it's a matrix. View the contents of myVector now to see what it
| looks like.

> myVector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| You're the best!
  |======================                                          |  34%
| Now, let's confirm it's actually a matrix by using the class()
| function. Type class(myVector) to see what I mean.

> class(myVector)
[1] "matrix"

| You nailed it! Good job!
  |========================                                        |  37%
| Sure enough, myVector is now a matrix. We should store it in a new
| variable that helps us remember what it is. Store the value of myVector
| in a new variable called myMatrix.

> myMatrix
Error: object 'myMatrix' not found
> myMatrix <-myVector

| That's correct!
  |==========================                                      |  40%
| The example that we've used so far was meant to illustrate the point
| that a matrix is simply an atomic vector with a dimension attribute. A
| more direct method of creating the same matrix uses the matrix()
| function.

...
  |===========================                                     |  43%
| Bring up the help file for the matrix() function now using the `?`
| function.

> matrix?
+ 
+ 
+ matrix()
Error in `?`(matrix, matrix()) : 
  no documentation of type ‘matrix’ and topic ‘matrix()’ (or error in processing help)
> ?
+ matrix

| You are doing so well!
  |=============================                                   |  46%
| Now, look at the documentation for the matrix function and see if you
| can figure out how to create a matrix containing the same numbers
| (1-20) and dimensions (4 rows, 5 columns) by calling the matrix()
| function. Store the result in a variable called myMatrix2.

> ?
+ matrix

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Call the matrix() function with three arguments -- 1:20, the number of
| rows, and the number of columns. Be sure to specify arguments by their
| proper names and store the result in myMatrix2 (not in myMatrix).

> myMatrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)

| You got it right!
  |===============================                                 |  49%
| Finally, let's confirm that myMatrix and myMatrix2 are actually
| identical. The identical() function will tell us if its first two
| arguments are the same. Try it out.

> identical(myMatrix, myMatrix2)
[1] TRUE

| You got it!
  |=================================                               |  51%
| Now, imagine that the numbers in our table represent some measurements
| from a clinical experiment, where each row represents one patient and
| each column represents one variable for which measurements where taken.

...
  |===================================                             |  54%
| We may want to label the rows, so that we know which numbers belong to
| each patient in the experiment. One way to do this is to add a column
| to the matrix, which contains the names of all four people.

...
  |=====================================                           |  57%
| Let's start by creating a character vector containing the names of our
| patients -- Bill, Gina, Kelly, and Sean. Remember that double quotes
| tell R that something is a character string. Store the result in a
| variable called patients.

> 
> patients <- c("Bill", "Gina", "Kelly, "Sean")
Error: unexpected symbol in "patients <- c("Bill", "Gina", "Kelly, "Sean"
> patients <- ("Bill", "Gina", "Kelly, "Sean")
Error: unexpected ',' in "patients <- ("Bill","
> patients <- c("Bill", "Gina", "Kelly", "Sean")

| Excellent job!
  |======================================                          |  60%
| Now we'll use the cbind() function to 'combine columns'. Don't worry
| about storing the result in a new variable. Just call cbind() with two
| arguments -- the patients vector and myMatrix.

> cbind(patients, myMatrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| Keep up the great work!
  |========================================                        |  63%
| Something is fishy about our result! It appears that combining the
| character vector with our matrix of numbers caused everything to be
| enclosed in double quotes. This means we're left with a matrix of
| character strings, which is no good.

...
  |==========================================                      |  66%
| If you remember back to the beginning of this lesson, I told you that
| matrices can only contain ONE class of data. Therefore, when we tried
| to combine a character vector with a numeric matrix, R was forced to
| 'coerce' the numbers to characters, hence the double quotes.

...
  |============================================                    |  69%
| This is called 'implicit coersion', because we didn't ask for it. It
| just happened. But why didn't R just convert the names of our patients
| to numbers? I'll let you ponder that question on your own.

...
  |==============================================                  |  71%
| So, we're still left with the question of how to include the names of
| our patients in the table without destroying the integrity of our
| numeric data. Try the following -- myData <- data.frame(patients,
| myMatrix)

> myData <-data.frame(patients, myMatrix)

| You're the best!
  |================================================                |  74%
| Now view the contents of myData to see what we've come up with.

> myData
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| Great job!
  |=================================================               |  77%
| It looks like the data.frame() function allowed us to store our
| character vector of names right alongside our matrix of numbers. That's
| exactly what we were hoping for!

...
  |===================================================             |  80%
| Behind the scenes, the data.frame() function takes any number of
| arguments and returns a single object of class `data.frame` that is
| composed of the original objects.

...
  |=====================================================           |  83%
| Let's confirm this by calling the class() function on our newly created
| data frame.

> class(myData)
[1] "data.frame"

| Nice work!
  |=======================================================         |  86%
| It's also possible to assign names to the individual rows and columns
| of a data frame, which presents another possible way of determining
| which row of values in our table belongs to each patient.

...
  |=========================================================       |  89%
| However, since we've already solved that problem, let's solve a
| different problem by assigning names to the columns of our data frame
| so that we know what type of measurement each column represents.

...
  |===========================================================     |  91%
| Since we have six columns (including patient names), we'll need to
| first create a vector containing one element for each column. Create a
| character vector called cnames that contains the following values (in
| order) -- "patient", "age", "weight", "bp", "rating", "test".

> cnames <- c("patient", "age", "weight", "bp", "rating", "test")

| That's correct!
  |============================================================    |  94%
| Now, use the colnames() function to set the `colnames` attribute for
| our data frame. This is similar to the way we used the dim() function
| earlier in this lesson.

> colnames(myData) <-c("patient", "age", "weight", "bp", "rating", "test")

| Nice try, but that's not exactly what I was hoping for. Try again. Or,
| type info() for more options.

| Try colnames(myData) <- cnames.

> colnames(myData) <- cnames

| You got it right!
  |==============================================================  |  97%
| Let's see if that got the job done. Print the contents of myData.

> myData
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| You are quite good my friend!
  |================================================================| 100%
| In this lesson, you learned the basics of working with two very
| important and common data structures -- matrices and data frames.
| There's much more to learn and we'll be covering more advanced topics,
| particularly with respect to data frames, in future lessons.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: yes
Enter an item from the menu, or 0 to exit
Selection: 1

| Would you like me to notify Coursera that you've completed this lesson?
| If so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your course ID. If the homepage for your
| Coursera course is 'https://class.coursera.org/rprog-001', then your
| course ID is 'rprog-001' (without the quotes).

Course ID: rprog-002

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-002,
| Matrices_and_Data_Frames.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 2

| OK. I'm opening the swirl courses web page in your browser.

| Leaving swirl now. Type swirl() to resume.

> getwd()
[1] "/Users/kfiscalini/datasciencecoursera"
> data <- read.table("hw1_data.csv", header = TRUE, sep = ",")
> ozone <-data[,1]
> ozone
  [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18  14  34
 [18]   6  30  11   1  11   4  32  NA  NA  NA  23  45 115  37  NA  NA  NA
 [35]  NA  NA  NA  29  NA  71  39  NA  NA  23  NA  NA  21  37  20  12  13
 [52]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA 135  49  32  NA  64  40  77
 [69]  97  97  85  NA  10  27  NA   7  48  35  61  79  63  16  NA  NA  80
 [86] 108  20  52  82  50  64  59  39   9  16  78  35  66 122  89 110  NA
[103]  NA  44  28  65  NA  22  59  23  31  44  21   9  NA  45 168  73  NA
[120]  76 118  84  85  96  78  73  91  47  32  20  23  21  24  44  21  28
[137]   9  13  46  18  13  24  16  13  23  36   7  14  30  NA  14  18  20
> ozoneNA <-is.na(ozone)
> ozoneclean <-ozone[!ozoneNA]
> mean(ozoneclean)
[1] 42.12931
> ozone18 <- ["ozoneclean" >= 31]
Error: unexpected '[' in "ozone18 <- ["
> ozoneclean
  [1]  41  36  12  18  28  23  19   8   7  16  11  14  18  14  34   6  30
 [18]  11   1  11   4  32  23  45 115  37  29  71  39  23  21  37  20  12
 [35]  13 135  49  32  64  40  77  97  97  85  10  27   7  48  35  61  79
 [52]  63  16  80 108  20  52  82  50  64  59  39   9  16  78  35  66 122
 [69]  89 110  44  28  65  22  59  23  31  44  21   9  45 168  73  76 118
 [86]  84  85  96  78  73  91  47  32  20  23  21  24  44  21  28   9  13
[103]  46  18  13  24  16  13  23  36   7  14  30  14  18  20
> Oz <-data[data$Ozone > 31, ]
> Temp <- Oz[Oz$Temp > 90, ]
> OzTempNA <- is.na(Temp$Ozone & Temp$Temp)
> OzTempClean <-Temp[!OzTempNA]
Error in `[.data.frame`(Temp, !OzTempNA) : undefined columns selected
> JO <- data[data$Ozone > 31, ]
> JO2 <- JO[JO$Temp > 90, ]
> 
> NONO <- is.na(JO2$Ozone & JO2$Temp)
> JO3 <- JO2[!NONO, ]
> mean(JO3$Solar.R)
[1] 212.8
> filtered 
Error: object 'filtered' not found
> filtered <- data[(data$Ozone > 31 ) & (data$Temp > 90), ]
> filteredNA <- is.na(filtered)
> filteredclean <-filtered[!filteredNA]
> mean(filtered$Solar.R)
[1] NA
> Filtered_For_Ozone <- data[data$Ozone > 31, ]
> Filtered_For_Temp <- Filtered_For_Ozone[Filtered_For_Ozone$Temp > 90, ]
> Filtered_NAs <- is.na(Filtered_For_Temp$Ozone & Filtered_For_Temp$Temp)
> Clean_Filtered <- Filtered_For_Temp(!Filtered_NAs)
Error: could not find function "Filtered_For_Temp"
> Clean_Filtered <- Filtered_For_Temp[!Filtered_NAs]
Error in `[.data.frame`(Filtered_For_Temp, !Filtered_NAs) : 
  undefined columns selected
> Clean_Filtered <- Filtered_For_Temp[!Filtered_NAs, ]
> mean(Clean_Filtered$Solar.R)
[1] 212.8
> June <-data[data$Month = 6, ]
Error: unexpected '=' in "June <-data[data$Month ="
> June <-data[data$Month == 6, ]
> June_NA <- is.na(June)
> June_clean < June[!June_NA]
Error: object 'June_clean' not found
> June_clean <- June[!June_NA]
> mean(June_clean$Temp)
Error in June_clean$Temp : $ operator is invalid for atomic vectors
> mean(June-clean[['Temp']])
Error in mean(June - clean[["Temp"]]) : object 'clean' not found
> mean(June_clean[['Temp']])
Error in June_clean[["Temp"]] : subscript out of bounds
> June_clean
  [1]  29.0  71.0  39.0  23.0  21.0  37.0  20.0  12.0  13.0 286.0 287.0
 [12] 242.0 186.0 220.0 264.0 127.0 273.0 291.0 323.0 259.0 250.0 148.0
 [23] 332.0 322.0 191.0 284.0  37.0 120.0 137.0 150.0  59.0  91.0 250.0
 [34] 135.0 127.0  47.0  98.0  31.0 138.0   8.6   9.7  16.1   9.2   8.6
 [45]  14.3   9.7   6.9  13.8  11.5  10.9   9.2   8.0  13.8  11.5  14.9
 [56]  20.7   9.2  11.5  10.3   6.3   1.7   4.6   6.3   8.0   8.0  10.3
 [67]  11.5  14.9   8.0  78.0  74.0  67.0  84.0  85.0  79.0  82.0  87.0
 [78]  90.0  87.0  93.0  92.0  82.0  80.0  79.0  77.0  72.0  65.0  73.0
 [89]  76.0  77.0  76.0  76.0  76.0  75.0  78.0  73.0  80.0  77.0  83.0
[100]   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0
[111]   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0
[122]   6.0   6.0   6.0   6.0   6.0   6.0   6.0   6.0   1.0   2.0   3.0
[133]   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0  14.0
[144]  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0
[155]  26.0  27.0  28.0  29.0  30.0
> class(June_clean)
[1] "numeric"
> June
   Ozone Solar.R Wind Temp Month Day
32    NA     286  8.6   78     6   1
33    NA     287  9.7   74     6   2
34    NA     242 16.1   67     6   3
35    NA     186  9.2   84     6   4
36    NA     220  8.6   85     6   5
37    NA     264 14.3   79     6   6
38    29     127  9.7   82     6   7
39    NA     273  6.9   87     6   8
40    71     291 13.8   90     6   9
41    39     323 11.5   87     6  10
42    NA     259 10.9   93     6  11
43    NA     250  9.2   92     6  12
44    23     148  8.0   82     6  13
45    NA     332 13.8   80     6  14
46    NA     322 11.5   79     6  15
47    21     191 14.9   77     6  16
48    37     284 20.7   72     6  17
49    20      37  9.2   65     6  18
50    12     120 11.5   73     6  19
51    13     137 10.3   76     6  20
52    NA     150  6.3   77     6  21
53    NA      59  1.7   76     6  22
54    NA      91  4.6   76     6  23
55    NA     250  6.3   76     6  24
56    NA     135  8.0   75     6  25
57    NA     127  8.0   78     6  26
58    NA      47 10.3   73     6  27
59    NA      98 11.5   80     6  28
60    NA      31 14.9   77     6  29
61    NA     138  8.0   83     6  30
> mean(June$Temp)
[1] 79.1
> May <- data[data$Month = 5, ]
Error: unexpected '=' in "May <- data[data$Month ="
> May <- data[data$Month == 5, ]
> max(as.numeric(May$Ozone,)na.rm=TRUE)
Error: unexpected symbol in "max(as.numeric(May$Ozone,)na.rm"
> max(as.numeric(May$Ozone,)narm=T)
Error: unexpected symbol in "max(as.numeric(May$Ozone,)narm"
> max(as.numeric(May$Ozone)narm=T)
Error: unexpected symbol in "max(as.numeric(May$Ozone)narm"
> max(May$Ozone)narm=T)
Error: unexpected symbol in "max(May$Ozone)narm"
> ?
+ max
> max(May$Ozone, na.rm=T)
[1] 115
> x<-4L
> class(x)
[1] "integer"
> x<-c(4, "a", TRUE)
> class(x)
[1] "character"
> x<-c(1,3,5)
> y<-c(3, 2, 10)
> rbind(x,y)
  [,1] [,2] [,3]
x    1    3    5
y    3    2   10
> x<-1:4
> y<-2
> x=y
> x+y
[1] 4
> z <-x+y
> z
[1] 4
> ozoneNA
  [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE
 [12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [23] FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE
 [34]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE
 [45]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
 [56]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
 [67] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [78] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE
 [89] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[100] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
[111] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE
[122] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[144] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
> count(ozoneNA)
Error: could not find function "count"
> ?
+ count
No documentation for ‘count’ in specified packages and libraries:
you could try ‘??count’
> sum
function (..., na.rm = FALSE)  .Primitive("sum")
> ?
+ su,
Error: unexpected ',' in:
"?
su,"
> ?
+ sum
> sum(ozoneNA)
[1] 37
> pwd
Error: object 'pwd' not found
> getwd()
[1] "/Users/kfiscalini/datasciencecoursera"
> cd()
Error: could not find function "cd"
> ?
+ change
No documentation for ‘change’ in specified packages and libraries:
you could try ‘??change’
> getwd()
[1] "/Users/kfiscalini/specdata"
> data <- read.table("hw1_data.csv", header = TRUE, sep = ",")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
  cannot open file 'hw1_data.csv': No such file or directory
> data <- read.table("001.csv", header = TRUE, sep = ",")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") : cannot open file '001.csv': No such file or directory
> ls()
 [1] "Clean_Filtered"     "cnames"             "data"              
 [4] "filtered"           "Filtered_For_Ozone" "Filtered_For_Temp" 
 [7] "Filtered_NAs"       "filteredclean"      "filteredNA"        
[10] "JO"                 "JO2"                "JO3"               
[13] "June"               "June_clean"         "June_NA"           
[16] "May"                "my_char"            "my_name"           
[19] "my_seq"             "myData"             "myDiv"             
[22] "myMatrix"           "myMatrix2"          "myNA"              
[25] "mySqrt"             "myVector"           "NONO"              
[28] "num_vect"           "Oz"                 "ozone"             
[31] "ozoneclean"         "ozoneNA"            "OzTempNA"          
[34] "patients"           "Temp"               "tf"                
[37] "vect"               "vect2"              "x"                 
[40] "y"                  "z"                 
> getwd()
[1] "/Users/kfiscalini/specdata"
> x<-read.csv(specdata/001.csv) 
Error: unexpected symbol in "x<-read.csv(specdata/001.csv"
> x<-read.csv(001.csv)
Error: unexpected symbol in "x<-read.csv(001.csv"
> x<-read.csv("001.csv")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") : cannot open file '001.csv': No such file or directory
> data <- read.table("001.csv", header = TRUE, sep = ",")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") : cannot open file '001.csv': No such file or directory
> getwd()
[1] "/Users/kfiscalini/specdata"
> ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, 
    pattern) 
{
    if (!missing(name)) {
        nameValue <- try(name, silent = TRUE)
        if (identical(class(nameValue), "try-error")) {
            name <- substitute(name)
            if (!is.character(name)) 
                name <- deparse(name)
            warning(gettextf("%s converted to character string", 
                sQuote(name)), domain = NA)
            pos <- name
        }
        else pos <- nameValue
    }
    all.names <- .Internal(ls(envir, all.names))
    if (!missing(pattern)) {
        if ((ll <- length(grep("[", pattern, fixed = TRUE))) && 
            ll != length(grep("]", pattern, fixed = TRUE))) {
            if (pattern == "[") {
                pattern <- "\\["
                warning("replaced regular expression pattern '[' by  '\\\\['")
            }
            else if (length(grep("[^\\\\]\\[<-", pattern))) {
                pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
            }
        }
        grep(pattern, all.names, value = TRUE)
    }
    else all.names
}
<bytecode: 0x102964d18>
<environment: namespace:base>
> ls()
 [1] "Clean_Filtered"     "cnames"             "data"              
 [4] "filtered"           "Filtered_For_Ozone" "Filtered_For_Temp" 
 [7] "Filtered_NAs"       "filteredclean"      "filteredNA"        
[10] "JO"                 "JO2"                "JO3"               
[13] "June"               "June_clean"         "June_NA"           
[16] "May"                "my_char"            "my_name"           
[19] "my_seq"             "myData"             "myDiv"             
[22] "myMatrix"           "myMatrix2"          "myNA"              
[25] "mySqrt"             "myVector"           "NONO"              
[28] "num_vect"           "Oz"                 "ozone"             
[31] "ozoneclean"         "ozoneNA"            "OzTempNA"          
[34] "patients"           "Temp"               "tf"                
[37] "vect"               "vect2"              "x"                 
[40] "y"                  "z"                 
> getwd()
[1] "/Users/kfiscalini/specdata"
> list.files()
[1] "specdata"
> setwd()
Error in setwd() : argument "dir" is missing, with no default
> cd()
Error: could not find function "cd"
No help files found matching ‘change directory’ using fuzzy
matching
> setwd(/specdata)
Error: unexpected '/' in "setwd(/"
> ?
+ setwd()
> get(wd)
Error in get(wd) : object 'wd' not found
> getwd()
[1] "/Users/kfiscalini/specdata"
> list.files()
  [1] "001.csv" "002.csv" "003.csv" "004.csv" "005.csv" "006.csv"
  [7] "007.csv" "008.csv" "009.csv" "010.csv" "011.csv" "012.csv"
 [13] "013.csv" "014.csv" "015.csv" "016.csv" "017.csv" "018.csv"
 [19] "019.csv" "020.csv" "021.csv" "022.csv" "023.csv" "024.csv"
 [25] "025.csv" "026.csv" "027.csv" "028.csv" "029.csv" "030.csv"
 [31] "031.csv" "032.csv" "033.csv" "034.csv" "035.csv" "036.csv"
 [37] "037.csv" "038.csv" "039.csv" "040.csv" "041.csv" "042.csv"
 [43] "043.csv" "044.csv" "045.csv" "046.csv" "047.csv" "048.csv"
 [49] "049.csv" "050.csv" "051.csv" "052.csv" "053.csv" "054.csv"
 [55] "055.csv" "056.csv" "057.csv" "058.csv" "059.csv" "060.csv"
 [61] "061.csv" "062.csv" "063.csv" "064.csv" "065.csv" "066.csv"
 [67] "067.csv" "068.csv" "069.csv" "070.csv" "071.csv" "072.csv"
 [73] "073.csv" "074.csv" "075.csv" "076.csv" "077.csv" "078.csv"
 [79] "079.csv" "080.csv" "081.csv" "082.csv" "083.csv" "084.csv"
 [85] "085.csv" "086.csv" "087.csv" "088.csv" "089.csv" "090.csv"
 [91] "091.csv" "092.csv" "093.csv" "094.csv" "095.csv" "096.csv"
 [97] "097.csv" "098.csv" "099.csv" "100.csv" "101.csv" "102.csv"
[103] "103.csv" "104.csv" "105.csv" "106.csv" "107.csv" "108.csv"
[109] "109.csv" "110.csv" "111.csv" "112.csv" "113.csv" "114.csv"
[115] "115.csv" "116.csv" "117.csv" "118.csv" "119.csv" "120.csv"
[121] "121.csv" "122.csv" "123.csv" "124.csv" "125.csv" "126.csv"
[127] "127.csv" "128.csv" "129.csv" "130.csv" "131.csv" "132.csv"
[133] "133.csv" "134.csv" "135.csv" "136.csv" "137.csv" "138.csv"
[139] "139.csv" "140.csv" "141.csv" "142.csv" "143.csv" "144.csv"
[145] "145.csv" "146.csv" "147.csv" "148.csv" "149.csv" "150.csv"
[151] "151.csv" "152.csv" "153.csv" "154.csv" "155.csv" "156.csv"
[157] "157.csv" "158.csv" "159.csv" "160.csv" "161.csv" "162.csv"
[163] "163.csv" "164.csv" "165.csv" "166.csv" "167.csv" "168.csv"
[169] "169.csv" "170.csv" "171.csv" "172.csv" "173.csv" "174.csv"
[175] "175.csv" "176.csv" "177.csv" "178.csv" "179.csv" "180.csv"
[181] "181.csv" "182.csv" "183.csv" "184.csv" "185.csv" "186.csv"
[187] "187.csv" "188.csv" "189.csv" "190.csv" "191.csv" "192.csv"
[193] "193.csv" "194.csv" "195.csv" "196.csv" "197.csv" "198.csv"
[199] "199.csv" "200.csv" "201.csv" "202.csv" "203.csv" "204.csv"
[205] "205.csv" "206.csv" "207.csv" "208.csv" "209.csv" "210.csv"
[211] "211.csv" "212.csv" "213.csv" "214.csv" "215.csv" "216.csv"
[217] "217.csv" "218.csv" "219.csv" "220.csv" "221.csv" "222.csv"
[223] "223.csv" "224.csv" "225.csv" "226.csv" "227.csv" "228.csv"
[229] "229.csv" "230.csv" "231.csv" "232.csv" "233.csv" "234.csv"
[235] "235.csv" "236.csv" "237.csv" "238.csv" "239.csv" "240.csv"
[241] "241.csv" "242.csv" "243.csv" "244.csv" "245.csv" "246.csv"
[247] "247.csv" "248.csv" "249.csv" "250.csv" "251.csv" "252.csv"
[253] "253.csv" "254.csv" "255.csv" "256.csv" "257.csv" "258.csv"
[259] "259.csv" "260.csv" "261.csv" "262.csv" "263.csv" "264.csv"
[265] "265.csv" "266.csv" "267.csv" "268.csv" "269.csv" "270.csv"
[271] "271.csv" "272.csv" "273.csv" "274.csv" "275.csv" "276.csv"
[277] "277.csv" "278.csv" "279.csv" "280.csv" "281.csv" "282.csv"
[283] "283.csv" "284.csv" "285.csv" "286.csv" "287.csv" "288.csv"
[289] "289.csv" "290.csv" "291.csv" "292.csv" "293.csv" "294.csv"
[295] "295.csv" "296.csv" "297.csv" "298.csv" "299.csv" "300.csv"
[301] "301.csv" "302.csv" "303.csv" "304.csv" "305.csv" "306.csv"
[307] "307.csv" "308.csv" "309.csv" "310.csv" "311.csv" "312.csv"
[313] "313.csv" "314.csv" "315.csv" "316.csv" "317.csv" "318.csv"
[319] "319.csv" "320.csv" "321.csv" "322.csv" "323.csv" "324.csv"
[325] "325.csv" "326.csv" "327.csv" "328.csv" "329.csv" "330.csv"
[331] "331.csv" "332.csv"
> x<-read.csv(specdata/001.csv) 
Error: unexpected symbol in "x<-read.csv(specdata/001.csv"
> x<-read.csv("001.csv")
> x
           Date sulfate nitrate ID
1    2003-01-01      NA      NA  1
2    2003-01-02      NA      NA  1
3    2003-01-03      NA      NA  1
4    2003-01-04      NA      NA  1
5    2003-01-05      NA      NA  1
6    2003-01-06      NA      NA  1
7    2003-01-07      NA      NA  1
8    2003-01-08      NA      NA  1
9    2003-01-09      NA      NA  1
10   2003-01-10      NA      NA  1
11   2003-01-11      NA      NA  1
12   2003-01-12      NA      NA  1
13   2003-01-13      NA      NA  1
14   2003-01-14      NA      NA  1
15   2003-01-15      NA      NA  1
16   2003-01-16      NA      NA  1
17   2003-01-17      NA      NA  1
18   2003-01-18      NA      NA  1
19   2003-01-19      NA      NA  1
20   2003-01-20      NA      NA  1
21   2003-01-21      NA      NA  1
22   2003-01-22      NA      NA  1
23   2003-01-23      NA      NA  1
24   2003-01-24      NA      NA  1
25   2003-01-25      NA      NA  1
26   2003-01-26      NA      NA  1
27   2003-01-27      NA      NA  1
28   2003-01-28      NA      NA  1
29   2003-01-29      NA      NA  1
30   2003-01-30      NA      NA  1
31   2003-01-31      NA      NA  1
32   2003-02-01      NA      NA  1
33   2003-02-02      NA      NA  1
34   2003-02-03      NA      NA  1
35   2003-02-04      NA      NA  1
36   2003-02-05      NA      NA  1
37   2003-02-06      NA      NA  1
38   2003-02-07      NA      NA  1
39   2003-02-08      NA      NA  1
40   2003-02-09      NA      NA  1
41   2003-02-10      NA      NA  1
42   2003-02-11      NA      NA  1
43   2003-02-12      NA      NA  1
44   2003-02-13      NA      NA  1
45   2003-02-14      NA      NA  1
46   2003-02-15      NA      NA  1
47   2003-02-16      NA      NA  1
48   2003-02-17      NA      NA  1
49   2003-02-18      NA      NA  1
50   2003-02-19      NA      NA  1
51   2003-02-20      NA      NA  1
52   2003-02-21      NA      NA  1
53   2003-02-22      NA      NA  1
54   2003-02-23      NA      NA  1
55   2003-02-24      NA      NA  1
56   2003-02-25      NA      NA  1
57   2003-02-26      NA      NA  1
58   2003-02-27      NA      NA  1
59   2003-02-28      NA      NA  1
60   2003-03-01      NA      NA  1
61   2003-03-02      NA      NA  1
62   2003-03-03      NA      NA  1
63   2003-03-04      NA      NA  1
64   2003-03-05      NA      NA  1
65   2003-03-06      NA      NA  1
66   2003-03-07      NA      NA  1
67   2003-03-08      NA      NA  1
68   2003-03-09      NA      NA  1
69   2003-03-10      NA      NA  1
70   2003-03-11      NA      NA  1
71   2003-03-12      NA      NA  1
72   2003-03-13      NA      NA  1
73   2003-03-14      NA      NA  1
74   2003-03-15      NA      NA  1
75   2003-03-16      NA      NA  1
76   2003-03-17      NA      NA  1
77   2003-03-18      NA      NA  1
78   2003-03-19      NA      NA  1
79   2003-03-20      NA      NA  1
80   2003-03-21      NA      NA  1
81   2003-03-22      NA      NA  1
82   2003-03-23      NA      NA  1
83   2003-03-24      NA      NA  1
84   2003-03-25      NA      NA  1
85   2003-03-26      NA      NA  1
86   2003-03-27      NA      NA  1
87   2003-03-28      NA      NA  1
88   2003-03-29      NA      NA  1
89   2003-03-30      NA      NA  1
90   2003-03-31      NA      NA  1
91   2003-04-01      NA      NA  1
92   2003-04-02      NA      NA  1
93   2003-04-03      NA      NA  1
94   2003-04-04      NA      NA  1
95   2003-04-05      NA      NA  1
96   2003-04-06      NA      NA  1
97   2003-04-07      NA      NA  1
98   2003-04-08      NA      NA  1
99   2003-04-09      NA      NA  1
100  2003-04-10      NA      NA  1
101  2003-04-11      NA      NA  1
102  2003-04-12      NA      NA  1
103  2003-04-13      NA      NA  1
104  2003-04-14      NA      NA  1
105  2003-04-15      NA      NA  1
106  2003-04-16      NA      NA  1
107  2003-04-17      NA      NA  1
108  2003-04-18      NA      NA  1
109  2003-04-19      NA      NA  1
110  2003-04-20      NA      NA  1
111  2003-04-21      NA      NA  1
112  2003-04-22      NA      NA  1
113  2003-04-23      NA      NA  1
114  2003-04-24      NA      NA  1
115  2003-04-25      NA      NA  1
116  2003-04-26      NA      NA  1
117  2003-04-27      NA      NA  1
118  2003-04-28      NA      NA  1
119  2003-04-29      NA      NA  1
120  2003-04-30      NA      NA  1
121  2003-05-01      NA      NA  1
122  2003-05-02      NA      NA  1
123  2003-05-03      NA      NA  1
124  2003-05-04      NA      NA  1
125  2003-05-05      NA      NA  1
126  2003-05-06      NA      NA  1
127  2003-05-07      NA      NA  1
128  2003-05-08      NA      NA  1
129  2003-05-09      NA      NA  1
130  2003-05-10      NA      NA  1
131  2003-05-11      NA      NA  1
132  2003-05-12      NA      NA  1
133  2003-05-13      NA      NA  1
134  2003-05-14      NA      NA  1
135  2003-05-15      NA      NA  1
136  2003-05-16      NA      NA  1
137  2003-05-17      NA      NA  1
138  2003-05-18      NA      NA  1
139  2003-05-19      NA      NA  1
140  2003-05-20      NA      NA  1
141  2003-05-21      NA      NA  1
142  2003-05-22      NA      NA  1
143  2003-05-23      NA      NA  1
144  2003-05-24      NA      NA  1
145  2003-05-25      NA      NA  1
146  2003-05-26      NA      NA  1
147  2003-05-27      NA      NA  1
148  2003-05-28      NA      NA  1
149  2003-05-29      NA      NA  1
150  2003-05-30      NA      NA  1
151  2003-05-31      NA      NA  1
152  2003-06-01      NA      NA  1
153  2003-06-02      NA      NA  1
154  2003-06-03      NA      NA  1
155  2003-06-04      NA      NA  1
156  2003-06-05      NA      NA  1
157  2003-06-06      NA      NA  1
158  2003-06-07      NA      NA  1
159  2003-06-08      NA      NA  1
160  2003-06-09      NA      NA  1
161  2003-06-10      NA      NA  1
162  2003-06-11      NA      NA  1
163  2003-06-12      NA      NA  1
164  2003-06-13      NA      NA  1
165  2003-06-14      NA      NA  1
166  2003-06-15      NA      NA  1
167  2003-06-16      NA      NA  1
168  2003-06-17      NA      NA  1
169  2003-06-18      NA      NA  1
170  2003-06-19      NA      NA  1
171  2003-06-20      NA      NA  1
172  2003-06-21      NA      NA  1
173  2003-06-22      NA      NA  1
174  2003-06-23      NA      NA  1
175  2003-06-24      NA      NA  1
176  2003-06-25      NA      NA  1
177  2003-06-26      NA      NA  1
178  2003-06-27      NA      NA  1
179  2003-06-28      NA      NA  1
180  2003-06-29      NA      NA  1
181  2003-06-30      NA      NA  1
182  2003-07-01      NA      NA  1
183  2003-07-02      NA      NA  1
184  2003-07-03      NA      NA  1
185  2003-07-04      NA      NA  1
186  2003-07-05      NA      NA  1
187  2003-07-06      NA      NA  1
188  2003-07-07      NA      NA  1
189  2003-07-08      NA      NA  1
190  2003-07-09      NA      NA  1
191  2003-07-10      NA      NA  1
192  2003-07-11      NA      NA  1
193  2003-07-12      NA      NA  1
194  2003-07-13      NA      NA  1
195  2003-07-14      NA      NA  1
196  2003-07-15      NA      NA  1
197  2003-07-16      NA      NA  1
198  2003-07-17      NA      NA  1
199  2003-07-18      NA      NA  1
200  2003-07-19      NA      NA  1
201  2003-07-20      NA      NA  1
202  2003-07-21      NA      NA  1
203  2003-07-22      NA      NA  1
204  2003-07-23      NA      NA  1
205  2003-07-24      NA      NA  1
206  2003-07-25      NA      NA  1
207  2003-07-26      NA      NA  1
208  2003-07-27      NA      NA  1
209  2003-07-28      NA      NA  1
210  2003-07-29      NA      NA  1
211  2003-07-30      NA      NA  1
212  2003-07-31      NA      NA  1
213  2003-08-01      NA      NA  1
214  2003-08-02      NA      NA  1
215  2003-08-03      NA      NA  1
216  2003-08-04      NA      NA  1
217  2003-08-05      NA      NA  1
218  2003-08-06      NA      NA  1
219  2003-08-07      NA      NA  1
220  2003-08-08      NA      NA  1
221  2003-08-09      NA      NA  1
222  2003-08-10      NA      NA  1
223  2003-08-11      NA      NA  1
224  2003-08-12      NA      NA  1
225  2003-08-13      NA      NA  1
226  2003-08-14      NA      NA  1
227  2003-08-15      NA      NA  1
228  2003-08-16      NA      NA  1
229  2003-08-17      NA      NA  1
230  2003-08-18      NA      NA  1
231  2003-08-19      NA      NA  1
232  2003-08-20      NA      NA  1
233  2003-08-21      NA      NA  1
234  2003-08-22      NA      NA  1
235  2003-08-23      NA      NA  1
236  2003-08-24      NA      NA  1
237  2003-08-25      NA      NA  1
238  2003-08-26      NA      NA  1
239  2003-08-27      NA      NA  1
240  2003-08-28      NA      NA  1
241  2003-08-29      NA      NA  1
242  2003-08-30      NA      NA  1
243  2003-08-31      NA      NA  1
244  2003-09-01      NA      NA  1
245  2003-09-02      NA      NA  1
246  2003-09-03      NA      NA  1
247  2003-09-04      NA      NA  1
248  2003-09-05      NA      NA  1
249  2003-09-06      NA      NA  1
250  2003-09-07      NA      NA  1
251  2003-09-08      NA      NA  1
252  2003-09-09      NA      NA  1
253  2003-09-10      NA      NA  1
254  2003-09-11      NA      NA  1
255  2003-09-12      NA      NA  1
256  2003-09-13      NA      NA  1
257  2003-09-14      NA      NA  1
258  2003-09-15      NA      NA  1
259  2003-09-16      NA      NA  1
260  2003-09-17      NA      NA  1
261  2003-09-18      NA      NA  1
262  2003-09-19      NA      NA  1
263  2003-09-20      NA      NA  1
264  2003-09-21      NA      NA  1
265  2003-09-22      NA      NA  1
266  2003-09-23      NA      NA  1
267  2003-09-24      NA      NA  1
268  2003-09-25      NA      NA  1
269  2003-09-26      NA      NA  1
270  2003-09-27      NA      NA  1
271  2003-09-28      NA      NA  1
272  2003-09-29      NA      NA  1
273  2003-09-30      NA      NA  1
274  2003-10-01      NA      NA  1
275  2003-10-02      NA      NA  1
276  2003-10-03      NA      NA  1
277  2003-10-04      NA      NA  1
278  2003-10-05      NA      NA  1
279  2003-10-06   7.210   0.651  1
280  2003-10-07      NA      NA  1
281  2003-10-08      NA      NA  1
282  2003-10-09      NA      NA  1
283  2003-10-10      NA      NA  1
284  2003-10-11      NA      NA  1
285  2003-10-12   5.990   0.428  1
286  2003-10-13      NA      NA  1
287  2003-10-14      NA      NA  1
288  2003-10-15      NA      NA  1
289  2003-10-16      NA      NA  1
290  2003-10-17      NA      NA  1
291  2003-10-18   4.680   1.040  1
292  2003-10-19      NA      NA  1
293  2003-10-20      NA      NA  1
294  2003-10-21      NA      NA  1
295  2003-10-22      NA      NA  1
296  2003-10-23      NA      NA  1
297  2003-10-24   3.470   0.363  1
298  2003-10-25      NA      NA  1
299  2003-10-26      NA      NA  1
300  2003-10-27      NA      NA  1
301  2003-10-28      NA      NA  1
302  2003-10-29      NA      NA  1
303  2003-10-30   2.420   0.507  1
304  2003-10-31      NA      NA  1
305  2003-11-01      NA      NA  1
306  2003-11-02      NA      NA  1
307  2003-11-03      NA      NA  1
308  2003-11-04      NA      NA  1
309  2003-11-05      NA      NA  1
310  2003-11-06      NA      NA  1
311  2003-11-07      NA      NA  1
312  2003-11-08      NA      NA  1
313  2003-11-09      NA      NA  1
314  2003-11-10      NA      NA  1
315  2003-11-11   1.430   0.474  1
316  2003-11-12      NA      NA  1
317  2003-11-13      NA      NA  1
318  2003-11-14      NA      NA  1
319  2003-11-15      NA      NA  1
320  2003-11-16      NA      NA  1
321  2003-11-17   2.760   0.425  1
322  2003-11-18      NA      NA  1
323  2003-11-19      NA      NA  1
324  2003-11-20      NA      NA  1
325  2003-11-21      NA      NA  1
326  2003-11-22      NA      NA  1
327  2003-11-23   3.410   0.964  1
328  2003-11-24      NA      NA  1
329  2003-11-25      NA      NA  1
330  2003-11-26      NA      NA  1
331  2003-11-27      NA      NA  1
332  2003-11-28      NA      NA  1
333  2003-11-29   1.300   0.491  1
334  2003-11-30      NA      NA  1
335  2003-12-01      NA      NA  1
336  2003-12-02      NA      NA  1
337  2003-12-03      NA      NA  1
338  2003-12-04      NA      NA  1
339  2003-12-05   3.150   0.669  1
340  2003-12-06      NA      NA  1
341  2003-12-07      NA      NA  1
342  2003-12-08      NA      NA  1
343  2003-12-09      NA      NA  1
344  2003-12-10      NA      NA  1
345  2003-12-11   2.870   0.400  1
346  2003-12-12      NA      NA  1
347  2003-12-13      NA      NA  1
348  2003-12-14      NA      NA  1
349  2003-12-15      NA      NA  1
350  2003-12-16      NA      NA  1
351  2003-12-17      NA      NA  1
352  2003-12-18      NA      NA  1
353  2003-12-19      NA      NA  1
354  2003-12-20      NA      NA  1
355  2003-12-21      NA      NA  1
356  2003-12-22      NA      NA  1
357  2003-12-23   2.270   0.715  1
358  2003-12-24      NA      NA  1
359  2003-12-25      NA      NA  1
360  2003-12-26      NA      NA  1
361  2003-12-27      NA      NA  1
362  2003-12-28      NA      NA  1
363  2003-12-29   2.330   0.554  1
364  2003-12-30      NA      NA  1
365  2003-12-31      NA      NA  1
366  2004-01-01      NA      NA  1
367  2004-01-02      NA      NA  1
368  2004-01-03      NA      NA  1
369  2004-01-04   1.840   0.803  1
370  2004-01-05      NA      NA  1
371  2004-01-06      NA      NA  1
372  2004-01-07      NA      NA  1
373  2004-01-08      NA      NA  1
374  2004-01-09      NA      NA  1
375  2004-01-10   7.130   0.518  1
376  2004-01-11      NA      NA  1
377  2004-01-12      NA      NA  1
378  2004-01-13      NA      NA  1
379  2004-01-14      NA      NA  1
380  2004-01-15      NA      NA  1
381  2004-01-16      NA   0.924  1
382  2004-01-17      NA      NA  1
383  2004-01-18      NA      NA  1
384  2004-01-19      NA      NA  1
385  2004-01-20      NA      NA  1
386  2004-01-21      NA      NA  1
387  2004-01-22   2.050   1.400  1
388  2004-01-23      NA      NA  1
389  2004-01-24      NA      NA  1
390  2004-01-25      NA      NA  1
391  2004-01-26      NA      NA  1
392  2004-01-27      NA      NA  1
393  2004-01-28   2.050   0.979  1
394  2004-01-29      NA      NA  1
395  2004-01-30      NA      NA  1
396  2004-01-31      NA      NA  1
397  2004-02-01      NA      NA  1
398  2004-02-02      NA      NA  1
399  2004-02-03   2.580   0.632  1
400  2004-02-04      NA      NA  1
401  2004-02-05      NA      NA  1
402  2004-02-06      NA      NA  1
403  2004-02-07      NA      NA  1
404  2004-02-08      NA      NA  1
405  2004-02-09   3.260   0.506  1
406  2004-02-10      NA      NA  1
407  2004-02-11      NA      NA  1
408  2004-02-12      NA      NA  1
409  2004-02-13      NA      NA  1
410  2004-02-14      NA      NA  1
411  2004-02-15      NA      NA  1
412  2004-02-16      NA      NA  1
413  2004-02-17      NA      NA  1
414  2004-02-18      NA      NA  1
415  2004-02-19      NA      NA  1
416  2004-02-20      NA      NA  1
417  2004-02-21   3.540   0.671  1
418  2004-02-22      NA      NA  1
419  2004-02-23      NA      NA  1
420  2004-02-24      NA      NA  1
421  2004-02-25      NA      NA  1
422  2004-02-26      NA      NA  1
423  2004-02-27   4.400   0.602  1
424  2004-02-28      NA      NA  1
425  2004-02-29      NA      NA  1
426  2004-03-01      NA      NA  1
427  2004-03-02      NA      NA  1
428  2004-03-03      NA      NA  1
429  2004-03-04   2.040   0.815  1
430  2004-03-05      NA      NA  1
431  2004-03-06      NA      NA  1
432  2004-03-07      NA      NA  1
433  2004-03-08      NA      NA  1
434  2004-03-09      NA      NA  1
435  2004-03-10   4.360   1.080  1
436  2004-03-11      NA      NA  1
437  2004-03-12      NA      NA  1
438  2004-03-13      NA      NA  1
439  2004-03-14      NA      NA  1
440  2004-03-15      NA      NA  1
441  2004-03-16   3.460   0.351  1
442  2004-03-17      NA      NA  1
443  2004-03-18      NA      NA  1
444  2004-03-19      NA      NA  1
445  2004-03-20      NA      NA  1
446  2004-03-21      NA      NA  1
447  2004-03-22   2.990   0.486  1
448  2004-03-23      NA      NA  1
449  2004-03-24      NA      NA  1
450  2004-03-25      NA      NA  1
451  2004-03-26      NA      NA  1
452  2004-03-27      NA      NA  1
453  2004-03-28   2.000   0.340  1
454  2004-03-29      NA      NA  1
455  2004-03-30      NA      NA  1
456  2004-03-31      NA      NA  1
457  2004-04-01      NA      NA  1
458  2004-04-02      NA      NA  1
459  2004-04-03      NA      NA  1
460  2004-04-04      NA      NA  1
461  2004-04-05      NA      NA  1
462  2004-04-06      NA      NA  1
463  2004-04-07      NA      NA  1
464  2004-04-08      NA      NA  1
465  2004-04-09      NA      NA  1
466  2004-04-10      NA      NA  1
467  2004-04-11      NA      NA  1
468  2004-04-12      NA      NA  1
469  2004-04-13      NA      NA  1
470  2004-04-14      NA      NA  1
471  2004-04-15      NA      NA  1
472  2004-04-16      NA      NA  1
473  2004-04-17      NA      NA  1
474  2004-04-18      NA      NA  1
475  2004-04-19      NA      NA  1
476  2004-04-20      NA      NA  1
477  2004-04-21   2.420   0.531  1
478  2004-04-22      NA      NA  1
479  2004-04-23      NA      NA  1
480  2004-04-24      NA      NA  1
481  2004-04-25      NA      NA  1
482  2004-04-26      NA      NA  1
483  2004-04-27      NA      NA  1
484  2004-04-28      NA      NA  1
485  2004-04-29      NA      NA  1
486  2004-04-30      NA      NA  1
487  2004-05-01      NA      NA  1
488  2004-05-02      NA      NA  1
489  2004-05-03      NA      NA  1
490  2004-05-04      NA      NA  1
491  2004-05-05      NA      NA  1
492  2004-05-06      NA      NA  1
493  2004-05-07      NA      NA  1
494  2004-05-08      NA      NA  1
495  2004-05-09      NA      NA  1
496  2004-05-10      NA      NA  1
497  2004-05-11      NA      NA  1
498  2004-05-12      NA      NA  1
499  2004-05-13      NA      NA  1
500  2004-05-14      NA      NA  1
501  2004-05-15   2.760   0.520  1
502  2004-05-16      NA      NA  1
503  2004-05-17      NA      NA  1
504  2004-05-18      NA      NA  1
505  2004-05-19      NA      NA  1
506  2004-05-20      NA      NA  1
507  2004-05-21      NA      NA  1
508  2004-05-22      NA      NA  1
509  2004-05-23      NA      NA  1
510  2004-05-24      NA      NA  1
511  2004-05-25      NA      NA  1
512  2004-05-26      NA      NA  1
513  2004-05-27      NA      NA  1
514  2004-05-28      NA      NA  1
515  2004-05-29      NA      NA  1
516  2004-05-30      NA      NA  1
517  2004-05-31      NA      NA  1
518  2004-06-01      NA      NA  1
519  2004-06-02      NA      NA  1
520  2004-06-03      NA      NA  1
521  2004-06-04      NA      NA  1
522  2004-06-05      NA      NA  1
523  2004-06-06      NA      NA  1
524  2004-06-07      NA      NA  1
525  2004-06-08      NA      NA  1
526  2004-06-09      NA      NA  1
527  2004-06-10      NA      NA  1
528  2004-06-11      NA      NA  1
529  2004-06-12      NA      NA  1
530  2004-06-13      NA      NA  1
531  2004-06-14      NA      NA  1
532  2004-06-15      NA      NA  1
533  2004-06-16      NA      NA  1
534  2004-06-17      NA      NA  1
535  2004-06-18      NA      NA  1
536  2004-06-19      NA      NA  1
537  2004-06-20      NA      NA  1
538  2004-06-21      NA      NA  1
539  2004-06-22      NA      NA  1
540  2004-06-23      NA      NA  1
541  2004-06-24      NA      NA  1
542  2004-06-25      NA      NA  1
543  2004-06-26      NA      NA  1
544  2004-06-27      NA      NA  1
545  2004-06-28      NA      NA  1
546  2004-06-29      NA      NA  1
547  2004-06-30      NA      NA  1
548  2004-07-01      NA      NA  1
549  2004-07-02      NA      NA  1
550  2004-07-03      NA      NA  1
551  2004-07-04      NA      NA  1
552  2004-07-05      NA      NA  1
553  2004-07-06      NA      NA  1
554  2004-07-07      NA      NA  1
555  2004-07-08   1.480   0.186  1
556  2004-07-09      NA      NA  1
557  2004-07-10      NA      NA  1
558  2004-07-11      NA      NA  1
559  2004-07-12      NA      NA  1
560  2004-07-13      NA      NA  1
561  2004-07-14   3.540   0.576  1
562  2004-07-15      NA      NA  1
563  2004-07-16      NA      NA  1
564  2004-07-17      NA      NA  1
565  2004-07-18      NA      NA  1
566  2004-07-19      NA      NA  1
567  2004-07-20   6.630   0.118  1
568  2004-07-21      NA      NA  1
569  2004-07-22      NA      NA  1
570  2004-07-23      NA      NA  1
571  2004-07-24      NA      NA  1
572  2004-07-25      NA      NA  1
573  2004-07-26  10.900   0.295  1
574  2004-07-27      NA      NA  1
575  2004-07-28      NA      NA  1
576  2004-07-29      NA      NA  1
577  2004-07-30      NA      NA  1
578  2004-07-31      NA      NA  1
579  2004-08-01   1.630   0.372  1
580  2004-08-02      NA      NA  1
581  2004-08-03      NA      NA  1
582  2004-08-04      NA      NA  1
583  2004-08-05      NA      NA  1
584  2004-08-06      NA      NA  1
585  2004-08-07   5.760   0.193  1
586  2004-08-08      NA      NA  1
587  2004-08-09      NA      NA  1
588  2004-08-10      NA      NA  1
589  2004-08-11      NA      NA  1
590  2004-08-12      NA      NA  1
591  2004-08-13   5.520   0.173  1
592  2004-08-14      NA      NA  1
593  2004-08-15      NA      NA  1
594  2004-08-16      NA      NA  1
595  2004-08-17      NA      NA  1
596  2004-08-18      NA      NA  1
597  2004-08-19  12.200   0.223  1
598  2004-08-20      NA      NA  1
599  2004-08-21      NA      NA  1
600  2004-08-22      NA      NA  1
601  2004-08-23      NA      NA  1
602  2004-08-24      NA      NA  1
603  2004-08-25   4.980   0.227  1
604  2004-08-26      NA      NA  1
605  2004-08-27      NA      NA  1
606  2004-08-28      NA      NA  1
607  2004-08-29      NA      NA  1
608  2004-08-30      NA      NA  1
609  2004-08-31   4.390   0.236  1
610  2004-09-01      NA      NA  1
611  2004-09-02      NA      NA  1
612  2004-09-03      NA      NA  1
613  2004-09-04      NA      NA  1
614  2004-09-05      NA      NA  1
615  2004-09-06   1.650   0.479  1
616  2004-09-07      NA      NA  1
617  2004-09-08      NA      NA  1
618  2004-09-09      NA      NA  1
619  2004-09-10      NA      NA  1
620  2004-09-11      NA      NA  1
621  2004-09-12   4.530   0.140  1
622  2004-09-13      NA      NA  1
623  2004-09-14      NA      NA  1
624  2004-09-15      NA      NA  1
625  2004-09-16      NA      NA  1
626  2004-09-17      NA      NA  1
627  2004-09-18   4.300   0.203  1
628  2004-09-19      NA      NA  1
629  2004-09-20      NA      NA  1
630  2004-09-21      NA      NA  1
631  2004-09-22      NA      NA  1
632  2004-09-23      NA      NA  1
633  2004-09-24      NA      NA  1
634  2004-09-25      NA      NA  1
635  2004-09-26      NA      NA  1
636  2004-09-27      NA      NA  1
637  2004-09-28      NA      NA  1
638  2004-09-29      NA      NA  1
639  2004-09-30  15.800   0.472  1
640  2004-10-01      NA      NA  1
641  2004-10-02      NA      NA  1
642  2004-10-03      NA      NA  1
643  2004-10-04      NA      NA  1
644  2004-10-05      NA      NA  1
645  2004-10-06   5.440   0.665  1
646  2004-10-07      NA      NA  1
647  2004-10-08      NA      NA  1
648  2004-10-09      NA      NA  1
649  2004-10-10      NA      NA  1
650  2004-10-11      NA      NA  1
651  2004-10-12   3.090   0.466  1
652  2004-10-13      NA      NA  1
653  2004-10-14      NA      NA  1
654  2004-10-15      NA      NA  1
655  2004-10-16      NA      NA  1
656  2004-10-17      NA      NA  1
657  2004-10-18   3.610   0.372  1
658  2004-10-19      NA      NA  1
659  2004-10-20      NA      NA  1
660  2004-10-21      NA      NA  1
661  2004-10-22      NA      NA  1
662  2004-10-23      NA      NA  1
663  2004-10-24   4.190   0.221  1
664  2004-10-25      NA      NA  1
665  2004-10-26      NA      NA  1
666  2004-10-27      NA      NA  1
667  2004-10-28      NA      NA  1
668  2004-10-29      NA      NA  1
669  2004-10-30   7.370   0.590  1
670  2004-10-31      NA      NA  1
671  2004-11-01      NA      NA  1
672  2004-11-02      NA      NA  1
673  2004-11-03      NA      NA  1
674  2004-11-04      NA      NA  1
675  2004-11-05   2.680   0.219  1
676  2004-11-06      NA      NA  1
677  2004-11-07      NA      NA  1
678  2004-11-08      NA      NA  1
679  2004-11-09      NA      NA  1
680  2004-11-10      NA      NA  1
681  2004-11-11      NA      NA  1
682  2004-11-12      NA      NA  1
683  2004-11-13      NA      NA  1
684  2004-11-14      NA      NA  1
685  2004-11-15      NA      NA  1
686  2004-11-16      NA      NA  1
687  2004-11-17   2.210   0.568  1
688  2004-11-18      NA      NA  1
689  2004-11-19      NA      NA  1
690  2004-11-20      NA      NA  1
691  2004-11-21      NA      NA  1
692  2004-11-22      NA      NA  1
693  2004-11-23   1.990   0.337  1
694  2004-11-24      NA      NA  1
695  2004-11-25      NA      NA  1
696  2004-11-26      NA      NA  1
697  2004-11-27      NA      NA  1
698  2004-11-28      NA      NA  1
699  2004-11-29   1.780   0.739  1
700  2004-11-30      NA      NA  1
701  2004-12-01      NA      NA  1
702  2004-12-02      NA      NA  1
703  2004-12-03      NA      NA  1
704  2004-12-04      NA      NA  1
705  2004-12-05   2.030   1.200  1
706  2004-12-06      NA      NA  1
707  2004-12-07      NA      NA  1
708  2004-12-08      NA      NA  1
709  2004-12-09      NA      NA  1
710  2004-12-10      NA      NA  1
711  2004-12-11   2.110   0.429  1
712  2004-12-12      NA      NA  1
713  2004-12-13      NA      NA  1
714  2004-12-14      NA      NA  1
715  2004-12-15      NA      NA  1
716  2004-12-16      NA      NA  1
717  2004-12-17   1.820   0.941  1
718  2004-12-18      NA      NA  1
719  2004-12-19      NA      NA  1
720  2004-12-20      NA      NA  1
721  2004-12-21      NA      NA  1
722  2004-12-22      NA      NA  1
723  2004-12-23   2.370   0.570  1
724  2004-12-24      NA      NA  1
725  2004-12-25      NA      NA  1
726  2004-12-26      NA      NA  1
727  2004-12-27      NA      NA  1
728  2004-12-28      NA      NA  1
729  2004-12-29   3.410   1.160  1
730  2004-12-30      NA      NA  1
731  2004-12-31      NA      NA  1
732  2005-01-01      NA      NA  1
733  2005-01-02      NA      NA  1
734  2005-01-03      NA      NA  1
735  2005-01-04      NA      NA  1
736  2005-01-05      NA      NA  1
737  2005-01-06      NA      NA  1
738  2005-01-07      NA      NA  1
739  2005-01-08      NA      NA  1
740  2005-01-09      NA      NA  1
741  2005-01-10   4.960   0.537  1
742  2005-01-11      NA      NA  1
743  2005-01-12      NA      NA  1
744  2005-01-13      NA      NA  1
745  2005-01-14      NA      NA  1
746  2005-01-15      NA      NA  1
747  2005-01-16   2.300   0.719  1
748  2005-01-17      NA      NA  1
749  2005-01-18      NA      NA  1
750  2005-01-19      NA      NA  1
751  2005-01-20      NA      NA  1
752  2005-01-21      NA      NA  1
753  2005-01-22   4.670   1.770  1
754  2005-01-23      NA      NA  1
755  2005-01-24      NA      NA  1
756  2005-01-25      NA      NA  1
757  2005-01-26      NA      NA  1
758  2005-01-27      NA      NA  1
759  2005-01-28   2.870   1.200  1
760  2005-01-29      NA      NA  1
761  2005-01-30      NA      NA  1
762  2005-01-31      NA      NA  1
763  2005-02-01      NA      NA  1
764  2005-02-02      NA      NA  1
765  2005-02-03   1.530   0.460  1
766  2005-02-04      NA      NA  1
767  2005-02-05      NA      NA  1
768  2005-02-06      NA      NA  1
769  2005-02-07      NA      NA  1
770  2005-02-08      NA      NA  1
771  2005-02-09   1.280   0.378  1
772  2005-02-10      NA      NA  1
773  2005-02-11      NA      NA  1
774  2005-02-12      NA      NA  1
775  2005-02-13      NA      NA  1
776  2005-02-14      NA      NA  1
777  2005-02-15      NA      NA  1
778  2005-02-16      NA      NA  1
779  2005-02-17      NA      NA  1
780  2005-02-18      NA      NA  1
781  2005-02-19      NA      NA  1
782  2005-02-20      NA      NA  1
783  2005-02-21   4.170   0.553  1
784  2005-02-22      NA      NA  1
785  2005-02-23      NA      NA  1
786  2005-02-24      NA      NA  1
787  2005-02-25      NA      NA  1
788  2005-02-26      NA      NA  1
789  2005-02-27   2.750   0.479  1
790  2005-02-28      NA      NA  1
791  2005-03-01      NA      NA  1
792  2005-03-02      NA      NA  1
793  2005-03-03      NA      NA  1
794  2005-03-04      NA      NA  1
795  2005-03-05   2.830   1.610  1
796  2005-03-06      NA      NA  1
797  2005-03-07      NA      NA  1
798  2005-03-08      NA      NA  1
799  2005-03-09      NA      NA  1
800  2005-03-10      NA      NA  1
801  2005-03-11   1.220   0.902  1
802  2005-03-12      NA      NA  1
803  2005-03-13      NA      NA  1
804  2005-03-14      NA      NA  1
805  2005-03-15      NA      NA  1
806  2005-03-16      NA      NA  1
807  2005-03-17   4.190   0.993  1
808  2005-03-18      NA      NA  1
809  2005-03-19      NA      NA  1
810  2005-03-20      NA      NA  1
811  2005-03-21      NA      NA  1
812  2005-03-22      NA      NA  1
813  2005-03-23   1.920   0.233  1
814  2005-03-24      NA      NA  1
815  2005-03-25      NA      NA  1
816  2005-03-26      NA      NA  1
817  2005-03-27      NA      NA  1
818  2005-03-28      NA      NA  1
819  2005-03-29   2.550   0.215  1
820  2005-03-30      NA      NA  1
821  2005-03-31      NA      NA  1
822  2005-04-01      NA      NA  1
823  2005-04-02      NA      NA  1
824  2005-04-03      NA      NA  1
825  2005-04-04   2.180   0.211  1
826  2005-04-05      NA      NA  1
827  2005-04-06      NA      NA  1
828  2005-04-07      NA      NA  1
829  2005-04-08      NA      NA  1
830  2005-04-09      NA      NA  1
831  2005-04-10   2.930   0.286  1
832  2005-04-11      NA      NA  1
833  2005-04-12      NA      NA  1
834  2005-04-13      NA      NA  1
835  2005-04-14      NA      NA  1
836  2005-04-15      NA      NA  1
837  2005-04-16   2.790   0.421  1
838  2005-04-17      NA      NA  1
839  2005-04-18      NA      NA  1
840  2005-04-19      NA      NA  1
841  2005-04-20      NA      NA  1
842  2005-04-21      NA      NA  1
843  2005-04-22   2.740   0.409  1
844  2005-04-23      NA      NA  1
845  2005-04-24      NA      NA  1
846  2005-04-25      NA      NA  1
847  2005-04-26      NA      NA  1
848  2005-04-27      NA      NA  1
849  2005-04-28   2.020   0.222  1
850  2005-04-29      NA      NA  1
851  2005-04-30      NA      NA  1
852  2005-05-01      NA      NA  1
853  2005-05-02      NA      NA  1
854  2005-05-03      NA      NA  1
855  2005-05-04   4.730   0.285  1
856  2005-05-05      NA      NA  1
857  2005-05-06      NA      NA  1
858  2005-05-07      NA      NA  1
859  2005-05-08      NA      NA  1
860  2005-05-09      NA      NA  1
861  2005-05-10   5.840   0.189  1
862  2005-05-11      NA      NA  1
863  2005-05-12      NA      NA  1
864  2005-05-13      NA      NA  1
865  2005-05-14      NA      NA  1
866  2005-05-15      NA      NA  1
867  2005-05-16   4.640   0.204  1
868  2005-05-17      NA      NA  1
869  2005-05-18      NA      NA  1
870  2005-05-19      NA      NA  1
871  2005-05-20      NA      NA  1
872  2005-05-21      NA      NA  1
873  2005-05-22   4.790   0.299  1
874  2005-05-23      NA      NA  1
875  2005-05-24      NA      NA  1
876  2005-05-25      NA      NA  1
877  2005-05-26      NA      NA  1
878  2005-05-27      NA      NA  1
879  2005-05-28   6.650   0.276  1
880  2005-05-29      NA      NA  1
881  2005-05-30      NA      NA  1
882  2005-05-31      NA      NA  1
883  2005-06-01      NA      NA  1
884  2005-06-02      NA      NA  1
885  2005-06-03   2.090   0.290  1
886  2005-06-04      NA      NA  1
887  2005-06-05      NA      NA  1
888  2005-06-06      NA      NA  1
889  2005-06-07      NA      NA  1
890  2005-06-08      NA      NA  1
891  2005-06-09      NA      NA  1
892  2005-06-10      NA      NA  1
893  2005-06-11      NA      NA  1
894  2005-06-12      NA      NA  1
895  2005-06-13      NA      NA  1
896  2005-06-14      NA      NA  1
897  2005-06-15   4.850   0.266  1
898  2005-06-16      NA      NA  1
899  2005-06-17      NA      NA  1
900  2005-06-18      NA      NA  1
901  2005-06-19      NA      NA  1
902  2005-06-20      NA      NA  1
903  2005-06-21   7.250   0.355  1
904  2005-06-22      NA      NA  1
905  2005-06-23      NA      NA  1
906  2005-06-24      NA      NA  1
907  2005-06-25      NA      NA  1
908  2005-06-26      NA      NA  1
909  2005-06-27   3.220   0.205  1
910  2005-06-28      NA      NA  1
911  2005-06-29      NA      NA  1
912  2005-06-30      NA      NA  1
913  2005-07-01      NA      NA  1
914  2005-07-02      NA      NA  1
915  2005-07-03   3.810   0.322  1
916  2005-07-04      NA      NA  1
917  2005-07-05      NA      NA  1
918  2005-07-06      NA      NA  1
919  2005-07-07      NA      NA  1
920  2005-07-08      NA      NA  1
921  2005-07-09   2.850   0.331  1
922  2005-07-10      NA      NA  1
923  2005-07-11      NA      NA  1
924  2005-07-12      NA      NA  1
925  2005-07-13      NA      NA  1
926  2005-07-14      NA      NA  1
927  2005-07-15   1.360   0.250  1
928  2005-07-16      NA      NA  1
929  2005-07-17      NA      NA  1
930  2005-07-18      NA      NA  1
931  2005-07-19      NA      NA  1
932  2005-07-20      NA      NA  1
933  2005-07-21   1.850   0.177  1
934  2005-07-22      NA      NA  1
935  2005-07-23      NA      NA  1
936  2005-07-24      NA      NA  1
937  2005-07-25      NA      NA  1
938  2005-07-26      NA      NA  1
939  2005-07-27  13.000   0.178  1
940  2005-07-28      NA      NA  1
941  2005-07-29      NA      NA  1
942  2005-07-30      NA      NA  1
943  2005-07-31      NA      NA  1
944  2005-08-01      NA      NA  1
945  2005-08-02   2.570   0.503  1
946  2005-08-03      NA      NA  1
947  2005-08-04      NA      NA  1
948  2005-08-05      NA      NA  1
949  2005-08-06      NA      NA  1
950  2005-08-07      NA      NA  1
951  2005-08-08   2.680   0.191  1
952  2005-08-09      NA      NA  1
953  2005-08-10      NA      NA  1
954  2005-08-11      NA      NA  1
955  2005-08-12      NA      NA  1
956  2005-08-13      NA      NA  1
957  2005-08-14   5.420   0.209  1
958  2005-08-15      NA      NA  1
959  2005-08-16      NA      NA  1
960  2005-08-17      NA      NA  1
961  2005-08-18      NA      NA  1
962  2005-08-19      NA      NA  1
963  2005-08-20   9.520   0.193  1
964  2005-08-21      NA      NA  1
965  2005-08-22      NA      NA  1
966  2005-08-23      NA      NA  1
967  2005-08-24      NA      NA  1
968  2005-08-25      NA      NA  1
969  2005-08-26   7.680   0.404  1
970  2005-08-27      NA      NA  1
971  2005-08-28      NA      NA  1
972  2005-08-29      NA      NA  1
973  2005-08-30      NA      NA  1
974  2005-08-31      NA      NA  1
975  2005-09-01   6.650   0.226  1
976  2005-09-02      NA      NA  1
977  2005-09-03      NA      NA  1
978  2005-09-04      NA      NA  1
979  2005-09-05      NA      NA  1
980  2005-09-06      NA      NA  1
981  2005-09-07      NA      NA  1
982  2005-09-08      NA      NA  1
983  2005-09-09      NA      NA  1
984  2005-09-10      NA      NA  1
985  2005-09-11      NA      NA  1
986  2005-09-12      NA      NA  1
987  2005-09-13  19.100   0.149  1
988  2005-09-14      NA      NA  1
989  2005-09-15      NA      NA  1
990  2005-09-16      NA      NA  1
991  2005-09-17      NA      NA  1
992  2005-09-18      NA      NA  1
993  2005-09-19   6.040   0.188  1
994  2005-09-20      NA      NA  1
995  2005-09-21      NA      NA  1
996  2005-09-22      NA      NA  1
997  2005-09-23      NA      NA  1
998  2005-09-24      NA      NA  1
999  2005-09-25   2.800   0.342  1
1000 2005-09-26      NA      NA  1
1001 2005-09-27      NA      NA  1
1002 2005-09-28      NA      NA  1
1003 2005-09-29      NA      NA  1
1004 2005-09-30      NA      NA  1
1005 2005-10-01   5.520   0.382  1
1006 2005-10-02      NA      NA  1
1007 2005-10-03      NA      NA  1
1008 2005-10-04      NA      NA  1
1009 2005-10-05      NA      NA  1
1010 2005-10-06      NA      NA  1
1011 2005-10-07   1.820   0.267  1
1012 2005-10-08      NA      NA  1
1013 2005-10-09      NA      NA  1
1014 2005-10-10      NA      NA  1
1015 2005-10-11      NA      NA  1
1016 2005-10-12      NA      NA  1
1017 2005-10-13      NA   0.388  1
1018 2005-10-14      NA      NA  1
1019 2005-10-15      NA      NA  1
1020 2005-10-16      NA      NA  1
1021 2005-10-17      NA      NA  1
1022 2005-10-18      NA      NA  1
1023 2005-10-19   4.880   0.363  1
1024 2005-10-20      NA      NA  1
1025 2005-10-21      NA      NA  1
1026 2005-10-22      NA      NA  1
1027 2005-10-23      NA      NA  1
1028 2005-10-24      NA      NA  1
1029 2005-10-25   2.280   0.283  1
1030 2005-10-26      NA      NA  1
1031 2005-10-27      NA      NA  1
1032 2005-10-28      NA      NA  1
1033 2005-10-29      NA      NA  1
1034 2005-10-30      NA      NA  1
1035 2005-10-31   5.510   0.446  1
1036 2005-11-01      NA      NA  1
1037 2005-11-02      NA      NA  1
1038 2005-11-03      NA      NA  1
1039 2005-11-04      NA      NA  1
1040 2005-11-05      NA      NA  1
1041 2005-11-06   2.410   0.302  1
1042 2005-11-07      NA      NA  1
1043 2005-11-08      NA      NA  1
1044 2005-11-09      NA      NA  1
1045 2005-11-10      NA      NA  1
1046 2005-11-11      NA      NA  1
1047 2005-11-12      NA      NA  1
1048 2005-11-13      NA      NA  1
1049 2005-11-14      NA      NA  1
1050 2005-11-15      NA      NA  1
1051 2005-11-16      NA      NA  1
1052 2005-11-17      NA      NA  1
1053 2005-11-18   1.630   0.559  1
1054 2005-11-19      NA      NA  1
1055 2005-11-20      NA      NA  1
1056 2005-11-21      NA      NA  1
1057 2005-11-22      NA      NA  1
1058 2005-11-23      NA      NA  1
1059 2005-11-24   1.670   0.743  1
1060 2005-11-25      NA      NA  1
1061 2005-11-26      NA      NA  1
1062 2005-11-27      NA      NA  1
1063 2005-11-28      NA      NA  1
1064 2005-11-29      NA      NA  1
1065 2005-11-30   0.959   0.312  1
1066 2005-12-01      NA      NA  1
1067 2005-12-02      NA      NA  1
1068 2005-12-03      NA      NA  1
1069 2005-12-04      NA      NA  1
1070 2005-12-05      NA      NA  1
1071 2005-12-06   2.740   1.830  1
1072 2005-12-07      NA      NA  1
1073 2005-12-08      NA      NA  1
1074 2005-12-09      NA      NA  1
1075 2005-12-10      NA      NA  1
1076 2005-12-11      NA      NA  1
1077 2005-12-12   0.613   0.326  1
1078 2005-12-13      NA      NA  1
1079 2005-12-14      NA      NA  1
1080 2005-12-15      NA      NA  1
1081 2005-12-16      NA      NA  1
1082 2005-12-17      NA      NA  1
1083 2005-12-18   2.370   1.100  1
1084 2005-12-19      NA      NA  1
1085 2005-12-20      NA      NA  1
1086 2005-12-21      NA      NA  1
1087 2005-12-22      NA      NA  1
1088 2005-12-23      NA      NA  1
1089 2005-12-24   2.240   1.800  1
1090 2005-12-25      NA      NA  1
1091 2005-12-26      NA      NA  1
1092 2005-12-27      NA      NA  1
1093 2005-12-28      NA      NA  1
1094 2005-12-29      NA      NA  1
1095 2005-12-30   2.530   1.010  1
1096 2005-12-31      NA      NA  1
1097 2006-01-01      NA      NA  1
1098 2006-01-02      NA      NA  1
1099 2006-01-03      NA      NA  1
1100 2006-01-04      NA      NA  1
1101 2006-01-05   3.500   1.610  1
1102 2006-01-06      NA      NA  1
1103 2006-01-07      NA      NA  1
1104 2006-01-08      NA      NA  1
1105 2006-01-09      NA      NA  1
1106 2006-01-10      NA      NA  1
1107 2006-01-11      NA   0.659  1
1108 2006-01-12      NA      NA  1
1109 2006-01-13      NA      NA  1
1110 2006-01-14      NA      NA  1
1111 2006-01-15      NA      NA  1
1112 2006-01-16      NA      NA  1
1113 2006-01-17      NA      NA  1
1114 2006-01-18      NA      NA  1
1115 2006-01-19      NA      NA  1
1116 2006-01-20      NA      NA  1
1117 2006-01-21      NA      NA  1
1118 2006-01-22      NA      NA  1
1119 2006-01-23      NA   0.523  1
1120 2006-01-24      NA      NA  1
1121 2006-01-25      NA      NA  1
1122 2006-01-26      NA      NA  1
1123 2006-01-27      NA      NA  1
1124 2006-01-28      NA      NA  1
1125 2006-01-29      NA   0.463  1
1126 2006-01-30      NA      NA  1
1127 2006-01-31      NA      NA  1
1128 2006-02-01      NA      NA  1
1129 2006-02-02      NA      NA  1
1130 2006-02-03      NA      NA  1
1131 2006-02-04      NA      NA  1
1132 2006-02-05      NA      NA  1
1133 2006-02-06      NA      NA  1
1134 2006-02-07      NA      NA  1
1135 2006-02-08      NA      NA  1
1136 2006-02-09      NA      NA  1
1137 2006-02-10   2.600   1.480  1
1138 2006-02-11      NA      NA  1
1139 2006-02-12      NA      NA  1
1140 2006-02-13      NA      NA  1
1141 2006-02-14      NA      NA  1
1142 2006-02-15      NA      NA  1
1143 2006-02-16   2.700   1.030  1
1144 2006-02-17      NA      NA  1
1145 2006-02-18      NA      NA  1
1146 2006-02-19      NA      NA  1
1147 2006-02-20      NA      NA  1
1148 2006-02-21      NA      NA  1
1149 2006-02-22   3.740   0.657  1
1150 2006-02-23      NA      NA  1
1151 2006-02-24      NA      NA  1
1152 2006-02-25      NA      NA  1
1153 2006-02-26      NA      NA  1
1154 2006-02-27      NA      NA  1
1155 2006-02-28   2.640   0.577  1
1156 2006-03-01      NA      NA  1
1157 2006-03-02      NA      NA  1
1158 2006-03-03      NA      NA  1
1159 2006-03-04      NA      NA  1
1160 2006-03-05      NA      NA  1
1161 2006-03-06   4.820   1.140  1
1162 2006-03-07      NA      NA  1
1163 2006-03-08      NA      NA  1
1164 2006-03-09      NA      NA  1
1165 2006-03-10      NA      NA  1
1166 2006-03-11      NA      NA  1
1167 2006-03-12      NA      NA  1
1168 2006-03-13      NA      NA  1
1169 2006-03-14      NA      NA  1
1170 2006-03-15      NA      NA  1
1171 2006-03-16      NA      NA  1
1172 2006-03-17      NA      NA  1
1173 2006-03-18      NA      NA  1
1174 2006-03-19      NA      NA  1
1175 2006-03-20      NA      NA  1
1176 2006-03-21      NA      NA  1
1177 2006-03-22      NA      NA  1
1178 2006-03-23      NA      NA  1
1179 2006-03-24      NA      NA  1
1180 2006-03-25      NA      NA  1
1181 2006-03-26      NA      NA  1
1182 2006-03-27      NA      NA  1
1183 2006-03-28      NA      NA  1
1184 2006-03-29      NA      NA  1
1185 2006-03-30      NA      NA  1
1186 2006-03-31      NA      NA  1
1187 2006-04-01      NA      NA  1
1188 2006-04-02      NA      NA  1
1189 2006-04-03      NA      NA  1
1190 2006-04-04      NA      NA  1
1191 2006-04-05      NA      NA  1
1192 2006-04-06      NA      NA  1
1193 2006-04-07      NA      NA  1
1194 2006-04-08      NA      NA  1
1195 2006-04-09      NA      NA  1
1196 2006-04-10      NA      NA  1
1197 2006-04-11      NA      NA  1
1198 2006-04-12      NA      NA  1
1199 2006-04-13      NA      NA  1
1200 2006-04-14      NA      NA  1
1201 2006-04-15      NA      NA  1
1202 2006-04-16      NA      NA  1
1203 2006-04-17      NA      NA  1
1204 2006-04-18      NA      NA  1
1205 2006-04-19      NA      NA  1
1206 2006-04-20      NA      NA  1
1207 2006-04-21      NA      NA  1
1208 2006-04-22      NA      NA  1
1209 2006-04-23      NA      NA  1
1210 2006-04-24      NA      NA  1
1211 2006-04-25      NA      NA  1
1212 2006-04-26      NA      NA  1
1213 2006-04-27      NA      NA  1
1214 2006-04-28      NA      NA  1
1215 2006-04-29      NA      NA  1
1216 2006-04-30      NA      NA  1
1217 2006-05-01      NA      NA  1
1218 2006-05-02      NA      NA  1
1219 2006-05-03      NA      NA  1
1220 2006-05-04      NA      NA  1
1221 2006-05-05      NA      NA  1
1222 2006-05-06      NA      NA  1
1223 2006-05-07      NA      NA  1
1224 2006-05-08      NA      NA  1
1225 2006-05-09      NA      NA  1
1226 2006-05-10      NA      NA  1
1227 2006-05-11      NA      NA  1
1228 2006-05-12      NA      NA  1
1229 2006-05-13      NA      NA  1
1230 2006-05-14      NA      NA  1
1231 2006-05-15      NA      NA  1
1232 2006-05-16      NA      NA  1
1233 2006-05-17      NA      NA  1
1234 2006-05-18      NA      NA  1
1235 2006-05-19      NA      NA  1
1236 2006-05-20      NA      NA  1
1237 2006-05-21      NA      NA  1
1238 2006-05-22      NA      NA  1
1239 2006-05-23      NA      NA  1
1240 2006-05-24      NA      NA  1
1241 2006-05-25      NA      NA  1
1242 2006-05-26      NA      NA  1
1243 2006-05-27      NA      NA  1
1244 2006-05-28      NA      NA  1
1245 2006-05-29      NA      NA  1
1246 2006-05-30      NA      NA  1
1247 2006-05-31      NA      NA  1
1248 2006-06-01      NA      NA  1
1249 2006-06-02      NA      NA  1
1250 2006-06-03      NA      NA  1
1251 2006-06-04      NA      NA  1
1252 2006-06-05      NA      NA  1
1253 2006-06-06      NA      NA  1
1254 2006-06-07      NA      NA  1
1255 2006-06-08      NA      NA  1
1256 2006-06-09      NA      NA  1
1257 2006-06-10      NA      NA  1
1258 2006-06-11      NA      NA  1
1259 2006-06-12      NA      NA  1
1260 2006-06-13      NA      NA  1
1261 2006-06-14      NA      NA  1
1262 2006-06-15      NA      NA  1
1263 2006-06-16      NA      NA  1
1264 2006-06-17      NA      NA  1
1265 2006-06-18      NA      NA  1
1266 2006-06-19      NA      NA  1
1267 2006-06-20      NA      NA  1
1268 2006-06-21      NA      NA  1
1269 2006-06-22      NA      NA  1
1270 2006-06-23      NA      NA  1
1271 2006-06-24      NA      NA  1
1272 2006-06-25      NA      NA  1
1273 2006-06-26      NA      NA  1
1274 2006-06-27      NA      NA  1
1275 2006-06-28      NA      NA  1
1276 2006-06-29      NA      NA  1
1277 2006-06-30      NA      NA  1
1278 2006-07-01      NA      NA  1
1279 2006-07-02      NA      NA  1
1280 2006-07-03      NA      NA  1
1281 2006-07-04      NA      NA  1
1282 2006-07-05      NA      NA  1
1283 2006-07-06      NA      NA  1
1284 2006-07-07      NA      NA  1
1285 2006-07-08      NA      NA  1
1286 2006-07-09      NA      NA  1
1287 2006-07-10      NA      NA  1
1288 2006-07-11      NA      NA  1
1289 2006-07-12      NA      NA  1
1290 2006-07-13      NA      NA  1
1291 2006-07-14      NA      NA  1
1292 2006-07-15      NA      NA  1
1293 2006-07-16      NA      NA  1
1294 2006-07-17      NA      NA  1
1295 2006-07-18      NA      NA  1
1296 2006-07-19      NA      NA  1
1297 2006-07-20      NA      NA  1
1298 2006-07-21      NA      NA  1
1299 2006-07-22      NA      NA  1
1300 2006-07-23      NA      NA  1
1301 2006-07-24      NA      NA  1
1302 2006-07-25      NA      NA  1
1303 2006-07-26      NA      NA  1
1304 2006-07-27      NA      NA  1
1305 2006-07-28      NA      NA  1
1306 2006-07-29      NA      NA  1
1307 2006-07-30      NA      NA  1
1308 2006-07-31      NA      NA  1
1309 2006-08-01      NA      NA  1
1310 2006-08-02      NA      NA  1
1311 2006-08-03      NA      NA  1
1312 2006-08-04      NA      NA  1
1313 2006-08-05      NA      NA  1
1314 2006-08-06      NA      NA  1
1315 2006-08-07      NA      NA  1
1316 2006-08-08      NA      NA  1
1317 2006-08-09      NA      NA  1
1318 2006-08-10      NA      NA  1
1319 2006-08-11      NA      NA  1
1320 2006-08-12      NA      NA  1
1321 2006-08-13      NA      NA  1
1322 2006-08-14      NA      NA  1
1323 2006-08-15      NA      NA  1
1324 2006-08-16      NA      NA  1
1325 2006-08-17      NA      NA  1
1326 2006-08-18      NA      NA  1
1327 2006-08-19      NA      NA  1
1328 2006-08-20      NA      NA  1
1329 2006-08-21      NA      NA  1
1330 2006-08-22      NA      NA  1
1331 2006-08-23      NA      NA  1
1332 2006-08-24      NA      NA  1
1333 2006-08-25      NA      NA  1
1334 2006-08-26      NA      NA  1
1335 2006-08-27      NA      NA  1
1336 2006-08-28      NA      NA  1
1337 2006-08-29      NA      NA  1
1338 2006-08-30      NA      NA  1
1339 2006-08-31      NA      NA  1
1340 2006-09-01      NA      NA  1
1341 2006-09-02      NA      NA  1
1342 2006-09-03      NA      NA  1
1343 2006-09-04      NA      NA  1
1344 2006-09-05      NA      NA  1
1345 2006-09-06      NA      NA  1
1346 2006-09-07      NA      NA  1
1347 2006-09-08      NA      NA  1
1348 2006-09-09      NA      NA  1
1349 2006-09-10      NA      NA  1
1350 2006-09-11      NA      NA  1
1351 2006-09-12      NA      NA  1
1352 2006-09-13      NA      NA  1
1353 2006-09-14      NA      NA  1
1354 2006-09-15      NA      NA  1
1355 2006-09-16      NA      NA  1
1356 2006-09-17      NA      NA  1
1357 2006-09-18      NA      NA  1
1358 2006-09-19      NA      NA  1
1359 2006-09-20      NA      NA  1
1360 2006-09-21      NA      NA  1
1361 2006-09-22      NA      NA  1
1362 2006-09-23      NA      NA  1
1363 2006-09-24      NA      NA  1
1364 2006-09-25      NA      NA  1
1365 2006-09-26      NA      NA  1
1366 2006-09-27      NA      NA  1
1367 2006-09-28      NA      NA  1
1368 2006-09-29      NA      NA  1
1369 2006-09-30      NA      NA  1
1370 2006-10-01      NA      NA  1
1371 2006-10-02      NA      NA  1
1372 2006-10-03      NA      NA  1
1373 2006-10-04      NA      NA  1
1374 2006-10-05      NA      NA  1
1375 2006-10-06      NA      NA  1
1376 2006-10-07      NA      NA  1
1377 2006-10-08      NA      NA  1
1378 2006-10-09      NA      NA  1
1379 2006-10-10      NA      NA  1
1380 2006-10-11      NA      NA  1
1381 2006-10-12      NA      NA  1
1382 2006-10-13      NA      NA  1
1383 2006-10-14      NA      NA  1
1384 2006-10-15      NA      NA  1
1385 2006-10-16      NA      NA  1
1386 2006-10-17      NA      NA  1
1387 2006-10-18      NA      NA  1
1388 2006-10-19      NA      NA  1
1389 2006-10-20      NA      NA  1
1390 2006-10-21      NA      NA  1
1391 2006-10-22      NA      NA  1
1392 2006-10-23      NA      NA  1
1393 2006-10-24      NA      NA  1
1394 2006-10-25      NA      NA  1
1395 2006-10-26      NA      NA  1
1396 2006-10-27      NA      NA  1
1397 2006-10-28      NA      NA  1
1398 2006-10-29      NA      NA  1
1399 2006-10-30      NA      NA  1
1400 2006-10-31      NA      NA  1
1401 2006-11-01      NA      NA  1
1402 2006-11-02      NA      NA  1
1403 2006-11-03      NA      NA  1
1404 2006-11-04      NA      NA  1
1405 2006-11-05      NA      NA  1
1406 2006-11-06      NA      NA  1
1407 2006-11-07      NA      NA  1
1408 2006-11-08      NA      NA  1
1409 2006-11-09      NA      NA  1
1410 2006-11-10      NA      NA  1
1411 2006-11-11      NA      NA  1
1412 2006-11-12      NA      NA  1
1413 2006-11-13      NA      NA  1
1414 2006-11-14      NA      NA  1
1415 2006-11-15      NA      NA  1
1416 2006-11-16      NA      NA  1
1417 2006-11-17      NA      NA  1
1418 2006-11-18      NA      NA  1
1419 2006-11-19      NA      NA  1
1420 2006-11-20      NA      NA  1
1421 2006-11-21      NA      NA  1
1422 2006-11-22      NA      NA  1
1423 2006-11-23      NA      NA  1
1424 2006-11-24      NA      NA  1
1425 2006-11-25      NA      NA  1
1426 2006-11-26      NA      NA  1
1427 2006-11-27      NA      NA  1
1428 2006-11-28      NA      NA  1
1429 2006-11-29      NA      NA  1
1430 2006-11-30      NA      NA  1
1431 2006-12-01      NA      NA  1
1432 2006-12-02      NA      NA  1
1433 2006-12-03      NA      NA  1
1434 2006-12-04      NA      NA  1
1435 2006-12-05      NA      NA  1
1436 2006-12-06      NA      NA  1
1437 2006-12-07      NA      NA  1
1438 2006-12-08      NA      NA  1
1439 2006-12-09      NA      NA  1
1440 2006-12-10      NA      NA  1
1441 2006-12-11      NA      NA  1
1442 2006-12-12      NA      NA  1
1443 2006-12-13      NA      NA  1
1444 2006-12-14      NA      NA  1
1445 2006-12-15      NA      NA  1
1446 2006-12-16      NA      NA  1
1447 2006-12-17      NA      NA  1
1448 2006-12-18      NA      NA  1
1449 2006-12-19      NA      NA  1
1450 2006-12-20      NA      NA  1
1451 2006-12-21      NA      NA  1
1452 2006-12-22      NA      NA  1
1453 2006-12-23      NA      NA  1
1454 2006-12-24      NA      NA  1
1455 2006-12-25      NA      NA  1
1456 2006-12-26      NA      NA  1
1457 2006-12-27      NA      NA  1
1458 2006-12-28      NA      NA  1
1459 2006-12-29      NA      NA  1
1460 2006-12-30      NA      NA  1
1461 2006-12-31      NA      NA  1
> getwd()
[1] "/Users/kfiscalini/datasciencecoursera/specdata"
> set()
Error: could not find function "set"
> setwd()
Error in setwd() : argument "dir" is missing, with no default
> setwd(datasciencecoursera)
Error in setwd(datasciencecoursera) : 
  object 'datasciencecoursera' not found
> setwd(/Users/kfiscalini/datasciencecoursera)
Error: unexpected '/' in "setwd(/"
> setwd(Users/kfiscalini/datasciencecoursera)
Error in setwd(Users/kfiscalini/datasciencecoursera) : 
  object 'Users' not found
> setwd(kfiscalini/datasciencecoursera)
Error in setwd(kfiscalini/datasciencecoursera) : 
  object 'kfiscalini' not found
> setwd(datasciencecoursera)
Error in setwd(datasciencecoursera) : 
  object 'datasciencecoursera' not found
> setwd(..)
Error in setwd(..) : object '..' not found
> getwd()
[1] "/Users/kfiscalini/datasciencecoursera"
> x<-read.csv(specdata/001.csv)
Error: unexpected symbol in "x<-read.csv(specdata/001.csv"
> x<-read.csv(specdata.001.csv)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'specdata.001.csv' not found
> x<-read.csv(specdata.001.csv)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'specdata.001.csv' not found
> x<-read.csv("specdata.001.csv")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
  cannot open file 'specdata.001.csv': No such file or directory
> x<-read.csv("001.csv")
2014-04-15 09:41:07.629 R[1360:707] -deltaZ is deprecated for NSEventTypeMagnify.  Please use -magnification.
> ?
+ sprintf()
> testfunc <- function(specdata, id = 1:10){
+         allData<-read.csv(paste(specdata,"/",id,".csv", sep =""))
+         
+         
+         return(allData)
+ }
> testfunc()
Error in paste(specdata, "/", id, ".csv", sep = "") : 
  argument "specdata" is missing, with no default
> alldata
Error: object 'alldata' not found
> ?
+ rnorm()
> ?
+ col()
> 
> source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
> source("submitscript1.R")
Error in file(filename, "r", encoding = encoding) : 
  cannot open the connection
In addition: Warning message:
In file(filename, "r", encoding = encoding) :
  cannot open file 'submitscript1.R': No such file or directory
> getwd()
[1] "/Users/kfiscalini/datasciencecoursera/specdata"
> source("submitscript1.R")
> submit()
Loading required package: bitops
Submission login (email): katiefiscalini@gmail.com
Submission  password: eVmMKaefPV
[1] 'pollutantmean' part 1
[2] 'pollutantmean' part 2
[3] 'pollutantmean' part 3
[4] 'pollutantmean' part 4
[5] 'complete' part 1
[6] 'complete' part 2
[7] 'complete' part 3
[8] 'corr' part 1
[9] 'corr' part 2
[10] 'corr' part 3
Which part are you submitting [1-10]? 1
Result:  Correct! 
> 